<!--suppress CheckTagEmptyBody -->
<Project InitialTargets="SilkAddIcon;SilkGenerateNuGetReadme;SilkAddDateTime;SilkCreatePublicApi">
    <!-- Presets for metapackages and native packages -->
    <PropertyGroup Condition="'$(SilkMetapackage)' == 'true' or '$(SilkNativePackage)' == 'true'">
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <SilkSourceLinkExempt>true</SilkSourceLinkExempt>
        <SilkPublicApiExempt>true</SilkPublicApiExempt>
    </PropertyGroup>
    <!-- Core properties -->
    <PropertyGroup>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <LangVersion>10</LangVersion>
        <Authors>.NET Foundation and Contributors</Authors>
        <PackageReleaseNotes>
            Silk.NET Winter 2022 Update 1

            - Added zero-cost extension methods for ComPtrs, making our DirectX bindings easier to use and higher quality than ever before.
            - Added WebGPU bindings for Emscripten, Dawn, and WGPU.
            - Added Direct2D bindings. (massive thank you to @curin)
            - Added an explicit check against calling Reset on a window while within the render loop of said window.
            - Added support for OpenAL disconnect extension. (thanks @okaniku)
            - Added TopMost in Silk.NET Windowing (thanks @MarioGK)
            - Improved support for WASM and AOT in the Silk.NET loader.
            - Improved Silk.NET.Maths generic specialization codegen.
            - Improved support for DXVK, including a new DXHandle property in INativeWindow for getting Linux HWND equivalents.
            - Updated to SDL 2.24.
            - Updated to Vulkan 1.3.233.
            - Updated to DirectStorage 1.1.0.
            - Updated to OpenXR 1.0.25.
            - Updated to latest OpenCL specifications.
            - Updated to latest OpenGL specifications.
            - Fixed XInput GetApi not being implemented. (thanks @ohtorobinson)
            - Fixed TransparentBuffer not being applied correctly without specifying a PreferredBitDepth. (thanks @MarioGK)
        </PackageReleaseNotes>
        <PackageTags Condition="'$(PackageTags)' == ''">OpenCL;OpenGL;OpenAL;OpenGLES;GLES;Vulkan;Assimp;DirectX;GLFW;SDL;Windowing;Input;Gamepad;Joystick;Keyboard;Mouse;SilkTouch;Source;Generator;C#;F#;.NET;DotNet;Mono;Vector;Math;Maths;Numerics;Game;Graphics;Compute;Audio;Sound;Engine;Silk;Silk.NET;Slim.NET;ElgarTK;GPU;Sharp;Science;Scientific;Visualization;Visual;Audiovisual;Windows;macOS;Linux;Android;Bindings;OSX;Wrapper;Native</PackageTags>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <PackageOutputPath>$(MSBuildThisFileDirectory)/../output_packages</PackageOutputPath>
        <RepositoryUrl>https://github.com/dotnet/Silk.NET</RepositoryUrl>
        <RepositoryType>Git</RepositoryType>
        <VersionPrefix>2.17</VersionPrefix>
        <VersionSuffix Condition="'$(VersionSuffix)' == ''"></VersionSuffix>
        <Description Condition="'$(Description)' == ''">
            Silk.NET is a high-speed, advanced library, providing bindings to popular low-level APIs such as OpenGL, OpenCL, OpenAL, OpenXR, GLFW, SDL, Vulkan, Assimp, and DirectX.
        </Description>
    </PropertyGroup>
    <!-- Date/time based versioning (mainly used by natives) -->
    <Target Name="SilkAddDateTime" Condition="'$(SilkGitDirForVersion)' != ''">
        <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
            <SilkGitDateTimeFormat>%25%25cI</SilkGitDateTimeFormat>
        </PropertyGroup>
        <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
            <SilkGitDateTimeFormat>%25cI</SilkGitDateTimeFormat>
        </PropertyGroup>
        <Exec ConsoleToMSBuild="True"
              Command="git show -s &quot;--format=$(SilkGitDateTimeFormat)&quot;"
              WorkingDirectory="$(SilkGitDirForVersion)">
            <Output TaskParameter="ConsoleOutput" PropertyName="_SilkGitIdt" />
        </Exec>
        <PropertyGroup>
            <PackageVersion>$([System.DateTime]::Parse($(_SilkGitIdt)).ToUniversalTime().ToString(yyyy.MM.dd))</PackageVersion>
        </PropertyGroup>
    </Target>
    <!-- SourceLink -->
    <PropertyGroup Condition="'$(SilkSourceLinkExempt)' == ''">
        <DebugType>portable</DebugType>
    </PropertyGroup>
    <ItemGroup Condition="'$(SilkSourceLinkExempt)' == ''">
        <PackageReference Include="DotNet.ReproducibleBuilds" Version="1.1.1" PrivateAssets="All"/>
        <PackageReference Include="DotNet.ReproducibleBuilds.Isolated" Version="1.1.1" PrivateAssets="All"/>
    </ItemGroup>
    <!-- Nuget Icon - done as a target so it doesn't appear in the IDE -->
    <Target Name="SilkAddIcon" Condition="'$(SilkIconExempt)' == ''">
        <ItemGroup>
            <None Include="$(MSBuildThisFileDirectory)../../documentation/readme/silkdotnet_v3.png"
                  Pack="true"
                  PackagePath="\" />
        </ItemGroup>
        <PropertyGroup>
            <PackageIcon>silkdotnet_v3.png</PackageIcon>
        </PropertyGroup>
    </Target>
    <!-- NuGet README -->
    <Target Name="SilkGenerateNuGetReadme" Condition="'$(SilkReadmeExempt)' == ''">
        <PropertyGroup>
            <SilkReadme>$([System.IO.File]::ReadAllText("$(MSBuildThisFileDirectory)../../README.md"))</SilkReadme>
            <SilkReadme>$([System.String]::Copy($(SilkReadme))
                .Replace('&lt;!-- Begin exclude from NuGet readme. --&gt;','&lt;!--')
                .Replace('&lt;!-- End exclude from NuGet readme. --&gt;','--&gt;')
                .Replace('&lt;!-- Begin include in NuGet readme.','')
                .Replace('End include in NuGet readme. --&gt;','')
                .Replace('&lt;h1 align=&quot;center&quot;&gt;', '# ')
                .Replace('&lt;h2 align=&quot;center&quot;&gt;', '# ')
                .Replace('&lt;/h1&gt;', '').Replace('&lt;/h2&gt;', '')
                .Replace('&lt;br /&gt;', '%0a%0a').Replace('&lt;br/&gt;', '%0a%0a')
                .Replace('&lt;div&gt;', '').Replace('&lt;/div&gt;', '')
                .Replace('&lt;a&gt;', '').Replace('&lt;/a&gt;', ''))
            </SilkReadme>
            <SilkReadmePath>$(IntermediateOutputPath)README.md</SilkReadmePath>
        </PropertyGroup>
        <PropertyGroup Condition="'$(SilkDescription)' != ''">
            <Description>$(SilkDescription) $(Description)</Description>
            <SilkExtendedDescription>$(SilkDescription) $(SilkExtendedDescription)%0a%0a</SilkExtendedDescription>
            <SilkReadme>$([System.String]::Copy($(SilkReadme))
                .Replace('&lt;!-- Package description inserted here automatically. --&gt;',
                '# About This Package%0a%0a$(SilkExtendedDescription)'))
            </SilkReadme>
        </PropertyGroup>
        <ItemGroup>
            <SilkReadmeLines Include="$(SilkReadme)" />
            <SilkReadmeGenerated Include="$(SilkReadmePath)" />
        </ItemGroup>
        <WriteLinesToFile File="@(SilkReadmeGenerated)" 
                          Lines="@(SilkReadmeLines)" 
                          Overwrite="true" 
                          Encoding="UTF-8" />
        <PropertyGroup>
            <PackageReadmeFile>README.md</PackageReadmeFile>
        </PropertyGroup>
        <ItemGroup>
            <None Include="$(SilkReadmePath)" Pack="true" PackagePath="\" />
        </ItemGroup>
    </Target>
    <!-- Public API Analyzer -->
    <ItemGroup Condition="'$(SilkPublicApiExempt)' != 'true'">
        <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.3" PrivateAssets="All" />
    </ItemGroup>
    <ItemGroup Condition="'$(SilkPublicApiExempt)' != 'true' and '$(TargetFramework)' != ''">
        <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt" />
        <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt" />
    </ItemGroup>
    <Target Name="SilkCreatePublicApi" Condition="'$(SilkPublicApiExempt)' != 'true' and '$(TargetFramework)' != ''">
        <ItemGroup>
            <SilkNewPublicAPILines Include="#nullable enable" />
        </ItemGroup>
        <MakeDir Directories="PublicAPI" Condition="!Exists('PublicAPI')" />
        <MakeDir Directories="PublicAPI/$(TargetFramework)" Condition="!Exists('PublicAPI/$(TargetFramework)')" />
        <WriteLinesToFile File="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt"
                          Lines="@(SilkNewPublicAPILines)"
                          Condition="!Exists('PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt')" />
        <WriteLinesToFile File="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt"
                          Lines="@(SilkNewPublicAPILines)"
                          Condition="!Exists('PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt')" />
    </Target>
</Project>
