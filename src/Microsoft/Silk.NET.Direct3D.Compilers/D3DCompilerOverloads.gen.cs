// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;
using Silk.NET.Core;
using Silk.NET.Core.Native;
using Silk.NET.Core.Attributes;
using Silk.NET.Core.Contexts;
using Silk.NET.Core.Loader;

#pragma warning disable 1591

namespace Silk.NET.Direct3D.Compilers
{
    public static class D3DCompilerOverloads
    {
        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 51, Column 1 in d3dcompiler.h")]
        public static unsafe int ReadFileToBlob(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, Silk.NET.Core.Native.ID3D10Blob** ppContents)
        {
            // SpanOverloader
            return thisApi.ReadFileToBlob(in pFileName.GetPinnableReference(), ppContents);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 51, Column 1 in d3dcompiler.h")]
        public static unsafe int ReadFileToBlob(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, ref Silk.NET.Core.Native.ID3D10Blob* ppContents)
        {
            // SpanOverloader
            return thisApi.ReadFileToBlob(in pFileName.GetPinnableReference(), ref ppContents);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 61, Column 1 in d3dcompiler.h")]
        public static unsafe int WriteBlobToFile(this D3DCompiler thisApi, Silk.NET.Core.Native.ID3D10Blob* pBlob, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, int bOverwrite)
        {
            // SpanOverloader
            return thisApi.WriteBlobToFile(pBlob, in pFileName.GetPinnableReference(), bOverwrite);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 61, Column 1 in d3dcompiler.h")]
        public static unsafe int WriteBlobToFile(this D3DCompiler thisApi, Span<Silk.NET.Core.Native.ID3D10Blob> pBlob, [Flow(FlowDirection.In)] char* pFileName, int bOverwrite)
        {
            // SpanOverloader
            return thisApi.WriteBlobToFile(ref pBlob.GetPinnableReference(), pFileName, bOverwrite);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 61, Column 1 in d3dcompiler.h")]
        public static unsafe int WriteBlobToFile(this D3DCompiler thisApi, Span<Silk.NET.Core.Native.ID3D10Blob> pBlob, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, int bOverwrite)
        {
            // SpanOverloader
            return thisApi.WriteBlobToFile(ref pBlob.GetPinnableReference(), in pFileName.GetPinnableReference(), bOverwrite);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 61, Column 1 in d3dcompiler.h")]
        public static unsafe int WriteBlobToFile(this D3DCompiler thisApi, Span<Silk.NET.Core.Native.ID3D10Blob> pBlob, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, int bOverwrite)
        {
            // SpanOverloader
            return thisApi.WriteBlobToFile(ref pBlob.GetPinnableReference(), pFileName, bOverwrite);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 210, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] void* pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, pSecondaryData, SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 240, Column 1 in d3dcompiler.h")]
        public static unsafe int Compile2<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, uint SecondaryDataFlags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pSecondaryData, nuint SecondaryDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.Compile2(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, SecondaryDataFlags, in pSecondaryData.GetPinnableReference(), SecondaryDataSize, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] char* pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<char> pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(in pFileName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, pDefines, ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), pInclude, pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] byte* pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), in pEntrypoint.GetPinnableReference(), pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] byte* pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, in pTarget.GetPinnableReference(), Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, Silk.NET.Core.Native.ID3D10Blob** ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 256, Column 1 in d3dcompiler.h")]
        public static unsafe int CompileFromFile(this D3DCompiler thisApi, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string pFileName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pEntrypoint, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pTarget, uint Flags1, uint Flags2, ref Silk.NET.Core.Native.ID3D10Blob* ppCode, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.CompileFromFile(pFileName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), pEntrypoint, pTarget, Flags1, Flags2, ref ppCode, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs)
        {
            // SpanOverloader
            return thisApi.Preprocess(pSrcData, SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] byte* pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In)] ReadOnlySpan<byte> pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, in pSourceName.GetPinnableReference(), in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] Silk.NET.Core.Native.D3DShaderMacro* pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, pDefines, ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Silk.NET.Core.Native.ID3DInclude* pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), pInclude, ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, Silk.NET.Core.Native.ID3D10Blob** ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, Silk.NET.Core.Native.ID3D10Blob** ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 274, Column 1 in d3dcompiler.h")]
        public static unsafe int Preprocess<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string pSourceName, [Flow(FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DShaderMacro> pDefines, Span<Silk.NET.Core.Native.ID3DInclude> pInclude, ref Silk.NET.Core.Native.ID3D10Blob* ppCodeText, ref Silk.NET.Core.Native.ID3D10Blob* ppErrorMsgs) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Preprocess(in pSrcData.GetPinnableReference(), SrcDataSize, pSourceName, in pDefines.GetPinnableReference(), ref pInclude.GetPinnableReference(), ref ppCodeText, ref ppErrorMsgs);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 299, Column 1 in d3dcompiler.h")]
        public static unsafe int GetDebugInfo<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Silk.NET.Core.Native.ID3D10Blob** ppDebugInfo) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetDebugInfo(in pSrcData.GetPinnableReference(), SrcDataSize, ppDebugInfo);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 299, Column 1 in d3dcompiler.h")]
        public static unsafe int GetDebugInfo<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppDebugInfo) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetDebugInfo(in pSrcData.GetPinnableReference(), SrcDataSize, ref ppDebugInfo);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 311, Column 1 in d3dcompiler.h")]
        public static unsafe int Reflect(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, Span<Guid> pInterface, void** ppReflector)
        {
            // SpanOverloader
            return thisApi.Reflect(pSrcData, SrcDataSize, ref pInterface.GetPinnableReference(), ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 311, Column 1 in d3dcompiler.h")]
        public static unsafe int Reflect(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, Span<Guid> pInterface, ref void* ppReflector)
        {
            // SpanOverloader
            return thisApi.Reflect(pSrcData, SrcDataSize, ref pInterface.GetPinnableReference(), ref ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 311, Column 1 in d3dcompiler.h")]
        public static unsafe int Reflect<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Guid* pInterface, void** ppReflector) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Reflect(in pSrcData.GetPinnableReference(), SrcDataSize, pInterface, ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 311, Column 1 in d3dcompiler.h")]
        public static unsafe int Reflect<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Guid* pInterface, ref void* ppReflector) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Reflect(in pSrcData.GetPinnableReference(), SrcDataSize, pInterface, ref ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 311, Column 1 in d3dcompiler.h")]
        public static unsafe int Reflect<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Span<Guid> pInterface, void** ppReflector) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Reflect(in pSrcData.GetPinnableReference(), SrcDataSize, ref pInterface.GetPinnableReference(), ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 311, Column 1 in d3dcompiler.h")]
        public static unsafe int Reflect<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Span<Guid> pInterface, ref void* ppReflector) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Reflect(in pSrcData.GetPinnableReference(), SrcDataSize, ref pInterface.GetPinnableReference(), ref ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 324, Column 1 in d3dcompiler.h")]
        public static unsafe int ReflectLibrary(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, Span<Guid> riid, void** ppReflector)
        {
            // SpanOverloader
            return thisApi.ReflectLibrary(pSrcData, SrcDataSize, ref riid.GetPinnableReference(), ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 324, Column 1 in d3dcompiler.h")]
        public static unsafe int ReflectLibrary(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, Span<Guid> riid, ref void* ppReflector)
        {
            // SpanOverloader
            return thisApi.ReflectLibrary(pSrcData, SrcDataSize, ref riid.GetPinnableReference(), ref ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 324, Column 1 in d3dcompiler.h")]
        public static unsafe int ReflectLibrary<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Guid* riid, void** ppReflector) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.ReflectLibrary(in pSrcData.GetPinnableReference(), SrcDataSize, riid, ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 324, Column 1 in d3dcompiler.h")]
        public static unsafe int ReflectLibrary<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Guid* riid, ref void* ppReflector) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.ReflectLibrary(in pSrcData.GetPinnableReference(), SrcDataSize, riid, ref ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 324, Column 1 in d3dcompiler.h")]
        public static unsafe int ReflectLibrary<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Span<Guid> riid, void** ppReflector) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.ReflectLibrary(in pSrcData.GetPinnableReference(), SrcDataSize, ref riid.GetPinnableReference(), ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 324, Column 1 in d3dcompiler.h")]
        public static unsafe int ReflectLibrary<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Span<Guid> riid, ref void* ppReflector) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.ReflectLibrary(in pSrcData.GetPinnableReference(), SrcDataSize, ref riid.GetPinnableReference(), ref ppReflector);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 345, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly)
        {
            // SpanOverloader
            return thisApi.Disassemble(pSrcData, SrcDataSize, Flags, in szComments.GetPinnableReference(), ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 345, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly)
        {
            // SpanOverloader
            return thisApi.Disassemble(pSrcData, SrcDataSize, Flags, in szComments.GetPinnableReference(), ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 345, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] byte* szComments, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Disassemble(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 345, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] byte* szComments, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Disassemble(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 345, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Disassemble(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, in szComments.GetPinnableReference(), ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 345, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Disassemble(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, in szComments.GetPinnableReference(), ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 345, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szComments, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Disassemble(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 345, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szComments, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.Disassemble(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] byte* szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly)
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(pSrcData, SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] byte* szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly)
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(pSrcData, SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, nuint StartByteOffset, nuint NumInsts, nuint* pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly)
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(pSrcData, SrcDataSize, Flags, in szComments.GetPinnableReference(), StartByteOffset, NumInsts, pFinishByteOffset, ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, nuint StartByteOffset, nuint NumInsts, nuint* pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly)
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(pSrcData, SrcDataSize, Flags, in szComments.GetPinnableReference(), StartByteOffset, NumInsts, pFinishByteOffset, ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly)
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(pSrcData, SrcDataSize, Flags, in szComments.GetPinnableReference(), StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly)
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(pSrcData, SrcDataSize, Flags, in szComments.GetPinnableReference(), StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly)
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(pSrcData, SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly)
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(pSrcData, SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] byte* szComments, nuint StartByteOffset, nuint NumInsts, nuint* pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, pFinishByteOffset, ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] byte* szComments, nuint StartByteOffset, nuint NumInsts, nuint* pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, pFinishByteOffset, ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] byte* szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] byte* szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, nuint StartByteOffset, nuint NumInsts, nuint* pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, in szComments.GetPinnableReference(), StartByteOffset, NumInsts, pFinishByteOffset, ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, nuint StartByteOffset, nuint NumInsts, nuint* pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, in szComments.GetPinnableReference(), StartByteOffset, NumInsts, pFinishByteOffset, ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, in szComments.GetPinnableReference(), StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<byte> szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, in szComments.GetPinnableReference(), StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szComments, nuint StartByteOffset, nuint NumInsts, nuint* pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, pFinishByteOffset, ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szComments, nuint StartByteOffset, nuint NumInsts, nuint* pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, pFinishByteOffset, ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 359, Column 1 in d3dcompiler.h")]
        public static unsafe int DisassembleRegion<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, [Flow(FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szComments, nuint StartByteOffset, nuint NumInsts, Span<nuint> pFinishByteOffset, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DisassembleRegion(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, szComments, StartByteOffset, NumInsts, ref pFinishByteOffset.GetPinnableReference(), ref ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 375, Column 1 in d3dcompiler.h")]
        public static unsafe int LoadModule<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint cbSrcDataSize, void** ppModule) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.LoadModule(in pSrcData.GetPinnableReference(), cbSrcDataSize, ppModule);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 375, Column 1 in d3dcompiler.h")]
        public static unsafe int LoadModule<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint cbSrcDataSize, ref void* ppModule) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.LoadModule(in pSrcData.GetPinnableReference(), cbSrcDataSize, ref ppModule);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 394, Column 1 in d3dcompiler.h")]
        public static unsafe int GetTraceInstructionOffsets(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, nuint StartInstIndex, nuint NumInsts, nuint* pOffsets, Span<nuint> pTotalInsts)
        {
            // SpanOverloader
            return thisApi.GetTraceInstructionOffsets(pSrcData, SrcDataSize, Flags, StartInstIndex, NumInsts, pOffsets, ref pTotalInsts.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 394, Column 1 in d3dcompiler.h")]
        public static unsafe int GetTraceInstructionOffsets(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, nuint StartInstIndex, nuint NumInsts, Span<nuint> pOffsets, nuint* pTotalInsts)
        {
            // SpanOverloader
            return thisApi.GetTraceInstructionOffsets(pSrcData, SrcDataSize, Flags, StartInstIndex, NumInsts, ref pOffsets.GetPinnableReference(), pTotalInsts);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 394, Column 1 in d3dcompiler.h")]
        public static unsafe int GetTraceInstructionOffsets(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint Flags, nuint StartInstIndex, nuint NumInsts, Span<nuint> pOffsets, Span<nuint> pTotalInsts)
        {
            // SpanOverloader
            return thisApi.GetTraceInstructionOffsets(pSrcData, SrcDataSize, Flags, StartInstIndex, NumInsts, ref pOffsets.GetPinnableReference(), ref pTotalInsts.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 394, Column 1 in d3dcompiler.h")]
        public static unsafe int GetTraceInstructionOffsets<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, nuint StartInstIndex, nuint NumInsts, nuint* pOffsets, nuint* pTotalInsts) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetTraceInstructionOffsets(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, StartInstIndex, NumInsts, pOffsets, pTotalInsts);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 394, Column 1 in d3dcompiler.h")]
        public static unsafe int GetTraceInstructionOffsets<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, nuint StartInstIndex, nuint NumInsts, nuint* pOffsets, Span<nuint> pTotalInsts) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetTraceInstructionOffsets(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, StartInstIndex, NumInsts, pOffsets, ref pTotalInsts.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 394, Column 1 in d3dcompiler.h")]
        public static unsafe int GetTraceInstructionOffsets<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, nuint StartInstIndex, nuint NumInsts, Span<nuint> pOffsets, nuint* pTotalInsts) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetTraceInstructionOffsets(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, StartInstIndex, NumInsts, ref pOffsets.GetPinnableReference(), pTotalInsts);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 394, Column 1 in d3dcompiler.h")]
        public static unsafe int GetTraceInstructionOffsets<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint Flags, nuint StartInstIndex, nuint NumInsts, Span<nuint> pOffsets, Span<nuint> pTotalInsts) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetTraceInstructionOffsets(in pSrcData.GetPinnableReference(), SrcDataSize, Flags, StartInstIndex, NumInsts, ref pOffsets.GetPinnableReference(), ref pTotalInsts.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 409, Column 1 in d3dcompiler.h")]
        public static unsafe int GetInputSignatureBlob<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Silk.NET.Core.Native.ID3D10Blob** ppSignatureBlob) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetInputSignatureBlob(in pSrcData.GetPinnableReference(), SrcDataSize, ppSignatureBlob);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 409, Column 1 in d3dcompiler.h")]
        public static unsafe int GetInputSignatureBlob<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppSignatureBlob) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetInputSignatureBlob(in pSrcData.GetPinnableReference(), SrcDataSize, ref ppSignatureBlob);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 420, Column 1 in d3dcompiler.h")]
        public static unsafe int GetOutputSignatureBlob<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Silk.NET.Core.Native.ID3D10Blob** ppSignatureBlob) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetOutputSignatureBlob(in pSrcData.GetPinnableReference(), SrcDataSize, ppSignatureBlob);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 420, Column 1 in d3dcompiler.h")]
        public static unsafe int GetOutputSignatureBlob<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppSignatureBlob) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetOutputSignatureBlob(in pSrcData.GetPinnableReference(), SrcDataSize, ref ppSignatureBlob);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 431, Column 1 in d3dcompiler.h")]
        public static unsafe int GetInputAndOutputSignatureBlob<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, Silk.NET.Core.Native.ID3D10Blob** ppSignatureBlob) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetInputAndOutputSignatureBlob(in pSrcData.GetPinnableReference(), SrcDataSize, ppSignatureBlob);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 431, Column 1 in d3dcompiler.h")]
        public static unsafe int GetInputAndOutputSignatureBlob<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, ref Silk.NET.Core.Native.ID3D10Blob* ppSignatureBlob) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetInputAndOutputSignatureBlob(in pSrcData.GetPinnableReference(), SrcDataSize, ref ppSignatureBlob);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 452, Column 1 in d3dcompiler.h")]
        public static unsafe int StripShader<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, uint uStripFlags, Silk.NET.Core.Native.ID3D10Blob** ppStrippedBlob) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.StripShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, uStripFlags, ppStrippedBlob);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 452, Column 1 in d3dcompiler.h")]
        public static unsafe int StripShader<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, uint uStripFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppStrippedBlob) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.StripShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, uStripFlags, ref ppStrippedBlob);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 488, Column 1 in d3dcompiler.h")]
        public static unsafe int GetBlobPart<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, BlobPart Part, uint Flags, Silk.NET.Core.Native.ID3D10Blob** ppPart) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetBlobPart(in pSrcData.GetPinnableReference(), SrcDataSize, Part, Flags, ppPart);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 488, Column 1 in d3dcompiler.h")]
        public static unsafe int GetBlobPart<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, BlobPart Part, uint Flags, ref Silk.NET.Core.Native.ID3D10Blob* ppPart) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.GetBlobPart(in pSrcData.GetPinnableReference(), SrcDataSize, Part, Flags, ref ppPart);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 501, Column 1 in d3dcompiler.h")]
        public static unsafe int SetBlobPart<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, BlobPart Part, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pPart, nuint PartSize, Silk.NET.Core.Native.ID3D10Blob** ppNewShader) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.SetBlobPart(pSrcData, SrcDataSize, Part, Flags, in pPart.GetPinnableReference(), PartSize, ppNewShader);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 501, Column 1 in d3dcompiler.h")]
        public static unsafe int SetBlobPart<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, BlobPart Part, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pPart, nuint PartSize, ref Silk.NET.Core.Native.ID3D10Blob* ppNewShader) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.SetBlobPart(pSrcData, SrcDataSize, Part, Flags, in pPart.GetPinnableReference(), PartSize, ref ppNewShader);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 501, Column 1 in d3dcompiler.h")]
        public static unsafe int SetBlobPart<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, BlobPart Part, uint Flags, [Flow(FlowDirection.In)] void* pPart, nuint PartSize, Silk.NET.Core.Native.ID3D10Blob** ppNewShader) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.SetBlobPart(in pSrcData.GetPinnableReference(), SrcDataSize, Part, Flags, pPart, PartSize, ppNewShader);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 501, Column 1 in d3dcompiler.h")]
        public static unsafe int SetBlobPart<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, BlobPart Part, uint Flags, [Flow(FlowDirection.In)] void* pPart, nuint PartSize, ref Silk.NET.Core.Native.ID3D10Blob* ppNewShader) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.SetBlobPart(in pSrcData.GetPinnableReference(), SrcDataSize, Part, Flags, pPart, PartSize, ref ppNewShader);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 501, Column 1 in d3dcompiler.h")]
        public static unsafe int SetBlobPart<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, BlobPart Part, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pPart, nuint PartSize, Silk.NET.Core.Native.ID3D10Blob** ppNewShader) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.SetBlobPart(in pSrcData.GetPinnableReference(), SrcDataSize, Part, Flags, in pPart.GetPinnableReference(), PartSize, ppNewShader);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 501, Column 1 in d3dcompiler.h")]
        public static unsafe int SetBlobPart<T0, T1>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, BlobPart Part, uint Flags, [Flow(FlowDirection.In)] ReadOnlySpan<T1> pPart, nuint PartSize, ref Silk.NET.Core.Native.ID3D10Blob* ppNewShader) where T0 : unmanaged where T1 : unmanaged
        {
            // SpanOverloader
            return thisApi.SetBlobPart(in pSrcData.GetPinnableReference(), SrcDataSize, Part, Flags, in pPart.GetPinnableReference(), PartSize, ref ppNewShader);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 534, Column 1 in d3dcompiler.h")]
        public static unsafe int CompressShaders(this D3DCompiler thisApi, uint uNumShaders, Span<ShaderData> pShaderData, uint uFlags, Silk.NET.Core.Native.ID3D10Blob** ppCompressedData)
        {
            // SpanOverloader
            return thisApi.CompressShaders(uNumShaders, ref pShaderData.GetPinnableReference(), uFlags, ppCompressedData);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 534, Column 1 in d3dcompiler.h")]
        public static unsafe int CompressShaders(this D3DCompiler thisApi, uint uNumShaders, Span<ShaderData> pShaderData, uint uFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppCompressedData)
        {
            // SpanOverloader
            return thisApi.CompressShaders(uNumShaders, ref pShaderData.GetPinnableReference(), uFlags, ref ppCompressedData);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, uint* pIndices, uint uFlags, Silk.NET.Core.Native.ID3D10Blob** ppShaders, Span<uint> pTotalShaders)
        {
            // SpanOverloader
            return thisApi.DecompressShaders(pSrcData, SrcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ppShaders, ref pTotalShaders.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, uint* pIndices, uint uFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppShaders, Span<uint> pTotalShaders)
        {
            // SpanOverloader
            return thisApi.DecompressShaders(pSrcData, SrcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ref ppShaders, ref pTotalShaders.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, Span<uint> pIndices, uint uFlags, Silk.NET.Core.Native.ID3D10Blob** ppShaders, uint* pTotalShaders)
        {
            // SpanOverloader
            return thisApi.DecompressShaders(pSrcData, SrcDataSize, uNumShaders, uStartIndex, ref pIndices.GetPinnableReference(), uFlags, ppShaders, pTotalShaders);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, Span<uint> pIndices, uint uFlags, Silk.NET.Core.Native.ID3D10Blob** ppShaders, Span<uint> pTotalShaders)
        {
            // SpanOverloader
            return thisApi.DecompressShaders(pSrcData, SrcDataSize, uNumShaders, uStartIndex, ref pIndices.GetPinnableReference(), uFlags, ppShaders, ref pTotalShaders.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, Span<uint> pIndices, uint uFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppShaders, uint* pTotalShaders)
        {
            // SpanOverloader
            return thisApi.DecompressShaders(pSrcData, SrcDataSize, uNumShaders, uStartIndex, ref pIndices.GetPinnableReference(), uFlags, ref ppShaders, pTotalShaders);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders(this D3DCompiler thisApi, [Flow(FlowDirection.In)] void* pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, Span<uint> pIndices, uint uFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppShaders, Span<uint> pTotalShaders)
        {
            // SpanOverloader
            return thisApi.DecompressShaders(pSrcData, SrcDataSize, uNumShaders, uStartIndex, ref pIndices.GetPinnableReference(), uFlags, ref ppShaders, ref pTotalShaders.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, uint* pIndices, uint uFlags, Silk.NET.Core.Native.ID3D10Blob** ppShaders, uint* pTotalShaders) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DecompressShaders(in pSrcData.GetPinnableReference(), SrcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ppShaders, pTotalShaders);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, uint* pIndices, uint uFlags, Silk.NET.Core.Native.ID3D10Blob** ppShaders, Span<uint> pTotalShaders) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DecompressShaders(in pSrcData.GetPinnableReference(), SrcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ppShaders, ref pTotalShaders.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, uint* pIndices, uint uFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppShaders, uint* pTotalShaders) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DecompressShaders(in pSrcData.GetPinnableReference(), SrcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ref ppShaders, pTotalShaders);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, uint* pIndices, uint uFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppShaders, Span<uint> pTotalShaders) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DecompressShaders(in pSrcData.GetPinnableReference(), SrcDataSize, uNumShaders, uStartIndex, pIndices, uFlags, ref ppShaders, ref pTotalShaders.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, Span<uint> pIndices, uint uFlags, Silk.NET.Core.Native.ID3D10Blob** ppShaders, uint* pTotalShaders) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DecompressShaders(in pSrcData.GetPinnableReference(), SrcDataSize, uNumShaders, uStartIndex, ref pIndices.GetPinnableReference(), uFlags, ppShaders, pTotalShaders);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, Span<uint> pIndices, uint uFlags, Silk.NET.Core.Native.ID3D10Blob** ppShaders, Span<uint> pTotalShaders) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DecompressShaders(in pSrcData.GetPinnableReference(), SrcDataSize, uNumShaders, uStartIndex, ref pIndices.GetPinnableReference(), uFlags, ppShaders, ref pTotalShaders.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, Span<uint> pIndices, uint uFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppShaders, uint* pTotalShaders) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DecompressShaders(in pSrcData.GetPinnableReference(), SrcDataSize, uNumShaders, uStartIndex, ref pIndices.GetPinnableReference(), uFlags, ref ppShaders, pTotalShaders);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 546, Column 1 in d3dcompiler.h")]
        public static unsafe int DecompressShaders<T0>(this D3DCompiler thisApi, [Flow(FlowDirection.In)] ReadOnlySpan<T0> pSrcData, nuint SrcDataSize, uint uNumShaders, uint uStartIndex, Span<uint> pIndices, uint uFlags, ref Silk.NET.Core.Native.ID3D10Blob* ppShaders, Span<uint> pTotalShaders) where T0 : unmanaged
        {
            // SpanOverloader
            return thisApi.DecompressShaders(in pSrcData.GetPinnableReference(), SrcDataSize, uNumShaders, uStartIndex, ref pIndices.GetPinnableReference(), uFlags, ref ppShaders, ref pTotalShaders.GetPinnableReference());
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 570, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble10Effect(this D3DCompiler thisApi, Span<ID3D10Effect> pEffect, uint Flags, Silk.NET.Core.Native.ID3D10Blob** ppDisassembly)
        {
            // SpanOverloader
            return thisApi.Disassemble10Effect(ref pEffect.GetPinnableReference(), Flags, ppDisassembly);
        }

        /// <summary>To be documented.</summary>
        [NativeName("Src", "Line 570, Column 1 in d3dcompiler.h")]
        public static unsafe int Disassemble10Effect(this D3DCompiler thisApi, Span<ID3D10Effect> pEffect, uint Flags, ref Silk.NET.Core.Native.ID3D10Blob* ppDisassembly)
        {
            // SpanOverloader
            return thisApi.Disassemble10Effect(ref pEffect.GetPinnableReference(), Flags, ref ppDisassembly);
        }

    }
}

