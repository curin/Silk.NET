// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Silk.Maths.Generation
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class BaseVector : BaseVectorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"// ============================================= THIS FILE IS AUTOGENERATED ============================================
// =================== Please make any edits in eng/generation/Silk.Maths.Generation/BaseVector.tt! ====================
// ============================================= THIS FILE IS AUTOGENERATED ============================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Serialization;
using System.Text;

namespace Silk.NET.Maths
{
    public unsafe ");
            
            #line 21 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Immutable ? "readonly" : ""));
            
            #line default
            #line hidden
            this.Write(" struct ");
            
            #line 21 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> :\r\n        IEquatable<");
            
            #line 22 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>,\r\n        IFormattable,\r\n        IParsable<");
            
            #line 24 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>,\r\n        IReadOnlyList<T>,\r\n        ISpanFormattable,\r\n        ISpanParsabl" +
                    "e<");
            
            #line 27 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>,\r\n        IUtf8SpanFormattable,\r\n        IUtf8SpanParsable<");
            
            #line 29 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>\r\n        where T : unmanaged, ");
            
            #line 30 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "IFloatingPointIeee754" : "IBinaryInteger"));
            
            #line default
            #line hidden
            this.Write("<T>\r\n    {\r\n        ");
            
            #line 32 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("private ");
            
            #line 34 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Immutable ? "readonly" : ""));
            
            #line default
            #line hidden
            this.Write(" T _");
            
            #line 34 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write(";\r\n        ");
            
            #line 35 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n        ");
            
            #line 37 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// The ");
            
            #line 41 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" component of the vector\r\n        /// </summary>\r\n        [DataMember]\r\n        p" +
                    "ublic T ");
            
            #line 44 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            get => _");
            
            #line 46 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write(";\r\n            ");
            
            #line 47 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
if (!Immutable){
            
            #line default
            #line hidden
            this.Write("set => _");
            
            #line 47 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write(" = value;");
            
            #line 47 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("        }\r\n        ");
            
            #line 49 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// Retrieve a reference to the component at the given index
        /// </summary>
        /// <param name=""index"">zero-based index of the component</param>
        /// <returns>reference to the component</returns>
        public ref readonly T this[int index] => ref AsSpan()[index];

        /// <summary>
        /// The square length of the vector
        /// </summary>
        public T LengthSquared => Dot(this);

        /// <summary>
        /// The number of components in this vector
        /// </summary>
        public int Count { get; } = ");
            
            #line 66 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Dimension));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n        /// <summary>\r\n        /// Creates a vector whose components have th" +
                    "e specified values\r\n        /// </summary>\r\n        ");
            
            #line 71 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("/// <param name=\"");
            
            #line 73 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("\">the value assigned to the ");
            
            #line 73 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" component</param>\r\n        ");
            
            #line 74 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("public ");
            
            #line 75 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 75 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForEachComponent(Dimension, "T ", ", T ", "", false)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n        ");
            
            #line 77 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("    _");
            
            #line 79 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 79 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write(";\r\n        ");
            
            #line 80 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n        ");
            
            #line 82 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            for (int i = MinDim; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("/// <summary>\r\n        /// Creates a vector whose components are from the given v" +
                    "ector and the specified values\r\n        /// </summary>\r\n        /// <param name=" +
                    "\"vec\">the source vector</param>\r\n        ");
            
            #line 88 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            for (int j = i; j < Dimension; j++)
            {
            
            #line default
            #line hidden
            this.Write("/// <param name=\"");
            
            #line 90 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(j, false)));
            
            #line default
            #line hidden
            this.Write("\">the value assigned to the ");
            
            #line 90 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(j)));
            
            #line default
            #line hidden
            this.Write(" component</param>\r\n        ");
            
            #line 91 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            }
            
            #line default
            #line hidden
            this.Write("\r\n        public ");
            
            #line 94 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 94 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(i, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vec, ");
            
            #line 94 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForEachComponent(Dimension, "T ", ", T ", "", false, i)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {");
            
            #line 95 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int j = 0; j < i; j++)
                {
            
            #line default
            #line hidden
            this.Write("                \r\n            _");
            
            #line 99 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(j, false)));
            
            #line default
            #line hidden
            this.Write(" = vec.");
            
            #line 99 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(j)));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 99 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            
            #line 99 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int j = i; j < Dimension; j++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            _");
            
            #line 103 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(j, false)));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 103 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(j, false)));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 103 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        ");
            
            #line 106 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("        \r\n        /// <summary>\r\n        /// Creates a vector whose elements have" +
                    " the specified value\r\n        /// </summary>\r\n        /// <param name=\"value\">th" +
                    "e value assigned to the X and Y components</param>\r\n        public ");
            
            #line 112 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("(T value) : this(");
            
            #line 112 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ForEachComponent(Dimension, "", "value", ", ", "")));
            
            #line default
            #line hidden
            this.Write(@")
        {
        }

        /// <summary>
        /// Creates a vector whose components from the given <see cref=""ReadOnlySpan{T}""/>. The span must have at least 2 elements.
        /// </summary>
        /// <param name=""values"">the span of elements to assign to the X and Y components</param>
        public ");
            
            #line 120 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("(ReadOnlySpan<T> values)\r\n        {\r\n            ArgumentOutOfRangeException.Thro" +
                    "wIfLessThan(values.Length, Count, nameof(values));\r\n\r\n        ");
            
            #line 124 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("    _");
            
            #line 126 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write(" = values[");
            
            #line 126 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("];\r\n        ");
            
            #line 127 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n        /// <summary>\r\n        /// Retrieve a span representation of this ve" +
                    "ctor\r\n        /// </summary>\r\n        /// <returns>the span of this vector</retu" +
                    "rns>\r\n        public ");
            
            #line 133 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Immutable ? "ReadOnly" : ""));
            
            #line default
            #line hidden
            this.Write("Span<T> AsSpan() => MemoryMarshal.Create");
            
            #line 133 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Immutable ? "ReadOnly" : ""));
            
            #line default
            #line hidden
            this.Write("Span(");
            
            #line 133 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Immutable ? "in" : "ref"));
            
            #line default
            #line hidden
            this.Write(" _x, Count);\r\n\r\n        /// <summary>Copies the elements of the vector to a speci" +
                    "fied array starting at a specified index position.</summary>\r\n        /// <param" +
                    " name=\"span\">The destination span.</param>\r\n        /// <param name=\"index\">The " +
                    "index at which to copy the first element of the vector.</param>\r\n        /// <ex" +
                    "ception cref=\"ArgumentException\">The number of elements in the current instance " +
                    "is greater than in the array.</exception>\r\n        /// <exception cref=\"Argument" +
                    "OutOfRangeException\"><paramref name=\"index\"> is less then zero.</paramref></exce" +
                    "ption>\r\n        /// <exception cref=\"ArgumentOutOfRangeException\"><paramref name" +
                    "=\"index\"> is greater then or equal to the array length.</paramref></exception>\r\n" +
                    "        /// <remarks>array must have a sufficient number of elements to accommod" +
                    "ate the two vector elements. In other words, elements index and index + 1 must a" +
                    "lready exist in array.</remarks>\r\n        public void CopyTo(Span<T> span, int i" +
                    "ndex = 0)\r\n        {\r\n            if ((index < 0) || (index >= span.Length))\r\n  " +
                    "          {\r\n                throw new ArgumentOutOfRangeException(nameof(index)" +
                    ", \"Specified argument was out of the range of valid values.\");\r\n            }\r\n\r" +
                    "\n            if ((span.Length - index) < Count)\r\n            {\r\n                " +
                    "throw new ArgumentException(\"Value does not fall within the expected range.\");\r\n" +
                    "            }\r\n\r\n            for (int i = 0; i< Count; i++)\r\n            {\r\n    " +
                    "            span[i + index] = this[i];\r\n            }\r\n        }\r\n\r\n        /// " +
                    "<summary>Copies the elements of the vector to a specified array starting at a sp" +
                    "ecified index position.</summary>\r\n        /// <param name=\"array\">The destinati" +
                    "on array.</param>\r\n        /// <param name=\"index\">The index at which to copy th" +
                    "e first element of the vector.</param>\r\n        /// <exception cref=\"ArgumentNul" +
                    "lException\"><paramref name=\"array\"> is <c>null</c></paramref></exception>\r\n     " +
                    "   /// <exception cref=\"ArgumentException\">The number of elements in the current" +
                    " instance is greater than in the array.</exception>\r\n        /// <exception cref" +
                    "=\"ArgumentOutOfRangeException\"><paramref name=\"index\"> is less then zero.</param" +
                    "ref></exception>\r\n        /// <exception cref=\"ArgumentOutOfRangeException\"><par" +
                    "amref name=\"index\"> is greater then or equal to the array length.</paramref></ex" +
                    "ception>\r\n        /// <remarks>array must have a sufficient number of elements t" +
                    "o accommodate the two vector elements. In other words, elements index and index " +
                    "+ 1 must already exist in array.</remarks>\r\n        public void CopyTo(T[]? arra" +
                    "y, int index)\r\n        {\r\n            if (array is null)\r\n            {\r\n       " +
                    "         throw new NullReferenceException(\"Object reference not set to an instan" +
                    "ce of an object.\");\r\n            }\r\n\r\n            if ((index < 0) || (index >= a" +
                    "rray.Length))\r\n            {\r\n                throw new ArgumentOutOfRangeExcept" +
                    "ion(nameof(index), \"Specified argument was out of the range of valid values.\");\r" +
                    "\n            }\r\n\r\n            if ((array.Length - index) < Count)\r\n            {" +
                    "\r\n                throw new ArgumentException(\"Value does not fall within the ex" +
                    "pected range.\");\r\n            }\r\n\r\n            for (int i = 0; i < Count; i++)\r\n" +
                    "            {\r\n                array[i + index] = this[i];\r\n            }\r\n     " +
                    "   }\r\n\r\n        /// <summary>\r\n        /// Gets a vector whose components are al" +
                    "l equal to zero\r\n        /// </summary>\r\n        public static ");
            
            #line 194 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Zero => new(T.Zero);\r\n\r\n        /// <summary>\r\n        /// Gets a vector whos" +
                    "e components are all equal to one\r\n        /// </summary>\r\n        public static" +
                    " ");
            
            #line 199 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> One => new(T.One);\r\n\r\n        ");
            
            #line 201 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Gets a vector whose ");
            
            #line 205 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" component is equal to one and all others are equal to zero\r\n        /// </summar" +
                    "y>\r\n        public static ");
            
            #line 207 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Unit");
            
            #line 207 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 207 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int j = 0; j < Dimension; j++)
                {
            
            #line default
            #line hidden
            
            #line 209 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(((j == i) ? "T.One" : "T.Zero") + ((j < Dimension - 1) ? ", " : ");")));
            
            #line default
            #line hidden
            
            #line 209 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
        }
            
            #line default
            #line hidden
            this.Write(@"

        #region Operators
        /// <summary>
        /// Returns the dot product of this and another vector
        /// </summary>
        /// <param name=""other"">the other vector</param>
        /// <returns>the dot product</returns>
        public T Dot(");
            
            #line 219 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> other) => ");
            
            #line 219 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Dot(this, other);\r\n\r\n        ");
            
            #line 221 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            if (Dimension == 3)
            {
            
            #line default
            #line hidden
            this.Write("/// <summary>\r\n        /// Cross Multiply this vector with another vector\r\n      " +
                    "  /// </summary>\r\n        /// <param name=\"other\">the other vector</param>\r\n    " +
                    "    /// <returns>the dot product</returns>\r\n        public ");
            
            #line 228 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Cross(");
            
            #line 228 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> other) => ");
            
            #line 228 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Cross(this, other);\r\n        ");
            
            #line 229 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// For each component, set the value to the max" +
                    " value between the component and another vector\'s matching component\r\n        //" +
                    "/ </summary>\r\n        /// <param name=\"other\">the other vector</param>\r\n        " +
                    "public ");
            
            #line 235 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Max(");
            
            #line 235 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> other) => ");
            
            #line 235 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Max(this, other);\r\n        /// <summary>\r\n        /// For each component, set th" +
                    "e value to the max value between the component and a scalar value\r\n        /// <" +
                    "/summary>\r\n        /// <param name=\"other\">the scalar</param>\r\n        public ");
            
            #line 240 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Max(T other) => ");
            
            #line 240 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@".Max(this, other);
        /// <summary>
        /// For each component, set the value to the min value between the component and another vector's matching component
        /// </summary>
        /// <param name=""other"">the other vector</param>
        public ");
            
            #line 245 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Min(");
            
            #line 245 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> other) => ");
            
            #line 245 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Min(this, other);\r\n        /// <summary>\r\n        /// For each component, set th" +
                    "e value to the min value between the component and a scalar value\r\n        /// <" +
                    "/summary>\r\n        /// <param name=\"other\">the scalar</param>\r\n        public ");
            
            #line 250 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Min(T other) => ");
            
            #line 250 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@".Min(this, other);
        /// <summary>
        /// For each component, clamp the value between the values of the matching components from a min and max vector
        /// </summary>
        /// <param name=""min"">the min vector</param>
        /// <param name=""max"">the max vector</param>
        public ");
            
            #line 256 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Clamp(");
            
            #line 256 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> min, ");
            
            #line 256 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> max) => ");
            
            #line 256 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@".Clamp(this, min, max);
        /// <summary>
        /// For each component, clamp the value between the values of the matching components from a min vector and max scalar
        /// </summary>
        /// <param name=""min"">the min vector</param>
        /// <param name=""max"">the max vector</param>
        public ");
            
            #line 262 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Clamp(");
            
            #line 262 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> min, T max) => ");
            
            #line 262 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@".Clamp(this, min, max);
        /// <summary>
        /// For each component, clamp the value between the values of the matching components from a max vector and a min scalar
        /// </summary>
        /// <param name=""min"">the min vector</param>
        /// <param name=""max"">the max vector</param>
        public ");
            
            #line 268 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Clamp(T min, ");
            
            #line 268 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> max) => ");
            
            #line 268 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@".Clamp(this, min, max);
        /// <summary>
        /// For each component, clamp the value between the values of a min and max scalar
        /// </summary>
        /// <param name=""min"">the min vector</param>
        /// <param name=""max"">the max vector</param>
        public ");
            
            #line 274 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Clamp(T min, T max) => ");
            
            #line 274 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Clamp(this, min, max);\r\n        /// <summary>\r\n        /// For each component, s" +
                    "et the value to the absolute value of the component\r\n        /// </summary>\r\n   " +
                    "     public ");
            
            #line 278 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Abs() => ");
            
            #line 278 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Abs(this);\r\n        /// <summary>\r\n        /// For each component, set the sign " +
                    "to the sign of the matching component from the sign vector\r\n        /// </summar" +
                    "y>\r\n        /// <param name=\"sign\">the sign vector</param>\r\n        public ");
            
            #line 283 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CopySign(");
            
            #line 283 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> sign) => ");
            
            #line 283 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".CopySign(this, sign);\r\n        /// <summary>\r\n        /// For each component, se" +
                    "t the sign to the sign of the given scalar\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"sign\">the sign scalar</param>\r\n        public ");
            
            #line 288 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CopySign(T sign) => ");
            
            #line 288 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".CopySign(this, sign);\r\n\r\n        /// <summary>\r\n        /// For each component, " +
                    "set the value to the appropriate sign value\r\n        /// </summary>\r\n        pub" +
                    "lic ");
            
            #line 293 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Sign() => ");
            
            #line 293 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Sign(this);\r\n\r\n        ");
            
            #line 295 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

            for (int i = MinMatRow; i <= MaxMatRow; i++)
            {
                for (int j = MinMatCol; j <= MaxMatCol; j++)
                {
            
            #line default
            #line hidden
            this.Write("/// <summary>\r\n        /// Transforms this vector by multiplying it in homogenous" +
                    " space with a given matrix\r\n        /// </summary>\r\n        /// <param name=\"tra" +
                    "nsform\">the transform matrix</param>\r\n        public ");
            
            #line 303 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Transform(Matrix");
            
            #line 303 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("x");
            
            #line 303 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            
            #line 303 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "F" : "I"));
            
            #line default
            #line hidden
            this.Write("<T> transform) => ");
            
            #line 303 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Transform(this, transform);\r\n        /// <summary>\r\n        /// Transforms this " +
                    "vector by multiplying it with a given matrix\r\n        /// </summary>\r\n        //" +
                    "/ <param name=\"transform\">the transform matrix</param>\r\n        public ");
            
            #line 308 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> TransformNormal(Matrix");
            
            #line 308 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("x");
            
            #line 308 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            
            #line 308 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "F" : "I"));
            
            #line default
            #line hidden
            this.Write("<T> transform) => ");
            
            #line 308 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".TransformNormal(this, transform);\r\n        \r\n        ");
            
            #line 310 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                }
            }
            
            #line default
            #line hidden
            this.Write("/// <summary>\r\n        /// Transforms this vector by multiplying it in homogenous" +
                    " space with a given matrix\r\n        /// </summary>\r\n        /// <param name=\"tra" +
                    "nsform\">the transform matrix</param>\r\n        public ");
            
            #line 316 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Transform(Matrix5x4");
            
            #line 316 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "F" : "I"));
            
            #line default
            #line hidden
            this.Write("<T> transform) => ");
            
            #line 316 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Transform(this, transform);\r\n        /// <summary>\r\n        /// Transforms this " +
                    "vector by multiplying it with a given matrix\r\n        /// </summary>\r\n        //" +
                    "/ <param name=\"transform\">the transform matrix</param>\r\n        public ");
            
            #line 321 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> TransformNormal(Matrix5x4");
            
            #line 321 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "F" : "I"));
            
            #line default
            #line hidden
            this.Write("<T> transform) => ");
            
            #line 321 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".TransformNormal(this, transform);\r\n        \r\n        /// <summary>\r\n        /// " +
                    "Reflects this vector across the given normal vector\r\n        /// </summary>\r\n   " +
                    "     /// <param name=\"normal\">the normal vector</param>\r\n        public ");
            
            #line 327 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Reflect(");
            
            #line 327 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> normal) => ");
            
            #line 327 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@".Reflect(this, normal);
        /// <summary>Adds two vectors together.</summary>
        /// <param name=""lh"">The first source vector.</param>
        /// <param name=""rh"">The second source vector.</param>
        /// <returns>The summed vector.</returns>
        public static ");
            
            #line 332 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator +(");
            
            #line 332 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 332 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh)\r\n        {");
            
            #line 333 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
if (IsPowerOfTwo(Dimension)){
            
            #line default
            #line hidden
            this.Write("            \r\n            switch (Unsafe.SizeOf<T>())\r\n            {");
            
            #line 336 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                    for (int size = 1; size <= 32; size <<= 1)
                    {
                        int vectorSize = int.Max(64, size << 3 * Dimension);
                        if (vectorSize > 512) continue; 
            
            #line default
            #line hidden
            this.Write("\r\n                case ");
            
            #line 342 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(size));
            
            #line default
            #line hidden
            this.Write(":\r\n                    if (Vector");
            
            #line 343 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>.IsSupported && Vector");
            
            #line 343 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write(".IsHardwareAccelerated)\r\n                    {\r\n                        Vector");
            
            #line 345 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T> result = lh.ToVector");
            
            #line 345 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("() + rh.ToVector");
            
            #line 345 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("();\r\n                        return Unsafe.ReadUnaligned<");
            
            #line 346 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>(ref Unsafe.As<Vector");
            
            #line 346 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>, byte>(ref result));\r\n                    }\r\n                break;\r\n        " +
                    "        ");
            
            #line 349 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                break;\r\n            }\r\n            ");
            
            #line 354 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("return new(");
            
            #line 354 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 356 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" + rh.");
            
            #line 356 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 356 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 356 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        }

        /// <summary>Subtracts the second vector from the first.</summary>
        /// <param name=""lh"">The first source vector.</param>
        /// <param name=""rh"">The second source vector.</param>
        /// <returns>The subtracted vector.</returns>
        public static ");
            
            #line 364 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator -(");
            
            #line 364 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 364 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh)\r\n        {");
            
            #line 365 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
if (IsPowerOfTwo(Dimension)){
            
            #line default
            #line hidden
            this.Write("            \r\n            switch (Unsafe.SizeOf<T>())\r\n            {");
            
            #line 368 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                    for (int size = 1; size <= 32; size <<= 1)
                    {
                        int vectorSize = int.Max(64, (size << 3) * Dimension);
                        if (vectorSize > 512) continue; 
            
            #line default
            #line hidden
            this.Write("\r\n                case ");
            
            #line 374 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(size));
            
            #line default
            #line hidden
            this.Write(":\r\n                    if (Vector");
            
            #line 375 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>.IsSupported && Vector");
            
            #line 375 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write(".IsHardwareAccelerated)\r\n                    {\r\n                        Vector");
            
            #line 377 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T> result = lh.ToVector");
            
            #line 377 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("() - rh.ToVector");
            
            #line 377 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("();\r\n                        return Unsafe.ReadUnaligned<");
            
            #line 378 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>(ref Unsafe.As<Vector");
            
            #line 378 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>, byte>(ref result));\r\n                    }\r\n                break;\r\n        " +
                    "        ");
            
            #line 381 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                break;\r\n            }\r\n            ");
            
            #line 386 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("return new(");
            
            #line 386 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 388 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" - rh.");
            
            #line 388 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 388 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 388 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        }

        /// <summary>Multiplies two vectors together.</summary>
        /// <param name=""lh"">The first source vector.</param>
        /// <param name=""rh"">The second source vector.</param>
        /// <returns>The multiplied vector.</returns>
        public static ");
            
            #line 396 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator *(");
            
            #line 396 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 396 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh)\r\n        {");
            
            #line 397 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
if (IsPowerOfTwo(Dimension)){
            
            #line default
            #line hidden
            this.Write("            \r\n            switch (Unsafe.SizeOf<T>())\r\n            {");
            
            #line 400 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                    for (int size = 1; size <= 32; size <<= 1)
                    {
                        int vectorSize = int.Max(64, (size << 3) * Dimension);
                        if (vectorSize > 512) continue; 
            
            #line default
            #line hidden
            this.Write("\r\n                case ");
            
            #line 406 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(size));
            
            #line default
            #line hidden
            this.Write(":\r\n                    if (Vector");
            
            #line 407 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>.IsSupported && Vector");
            
            #line 407 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write(".IsHardwareAccelerated)\r\n                    {\r\n                        Vector");
            
            #line 409 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T> result = lh.ToVector");
            
            #line 409 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("() * rh.ToVector");
            
            #line 409 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("();\r\n                        return Unsafe.ReadUnaligned<");
            
            #line 410 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>(ref Unsafe.As<Vector");
            
            #line 410 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>, byte>(ref result));\r\n                    }\r\n                break;\r\n        " +
                    "        ");
            
            #line 413 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                break;\r\n            }\r\n            ");
            
            #line 418 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("return new(");
            
            #line 418 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 420 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" * rh.");
            
            #line 420 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 420 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 420 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        }

        /// <summary>Divides the second vector from the first.</summary>
        /// <param name=""lh"">The first source vector.</param>
        /// <param name=""rh"">The second source vector.</param>
        /// <returns>The divided vector.</returns>
        public static ");
            
            #line 428 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator /(");
            
            #line 428 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 428 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh)\r\n        {");
            
            #line 429 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
if (IsPowerOfTwo(Dimension)){
            
            #line default
            #line hidden
            this.Write("            \r\n            switch (Unsafe.SizeOf<T>())\r\n            {");
            
            #line 432 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                    for (int size = 1; size <= 32; size <<= 1)
                    {
                        int vectorSize = int.Max(64, (size << 3) * Dimension);
                        if (vectorSize > 512) continue; 
            
            #line default
            #line hidden
            this.Write("\r\n                case ");
            
            #line 438 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(size));
            
            #line default
            #line hidden
            this.Write(":\r\n                    if (Vector");
            
            #line 439 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>.IsSupported && Vector");
            
            #line 439 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write(".IsHardwareAccelerated)\r\n                    {\r\n                        Vector");
            
            #line 441 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T> result = lh.ToVector");
            
            #line 441 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("() / rh.ToVector");
            
            #line 441 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("();\r\n                        return Unsafe.ReadUnaligned<");
            
            #line 442 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>(ref Unsafe.As<Vector");
            
            #line 442 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>, byte>(ref result));\r\n                    }\r\n                break;\r\n        " +
                    "        ");
            
            #line 445 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                default:\r\n                break;\r\n            }\r\n            ");
            
            #line 450 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("return new(");
            
            #line 450 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 452 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" / rh.");
            
            #line 452 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 452 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 452 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        }

        /// <summary>Divides the second vector from the first and returns the remainder.</summary>
        /// <param name=""lh"">The first source vector.</param>
        /// <param name=""rh"">The second source vector.</param>
        /// <returns>The remainder vector.</returns>
        public static ");
            
            #line 460 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator %(");
            
            #line 460 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 460 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 460 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 462 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" % rh.");
            
            #line 462 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 462 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 462 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// Negates the vector\r\n        /// </summary>\r\n" +
                    "        /// <param name=\"val\">the source vector</param>\r\n        /// <returns>th" +
                    "e negated vector</returns>\r\n        public static ");
            
            #line 470 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator -(");
            
            #line 470 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => Zero - val;\r\n        /// <summary>\r\n        /// Returns the vector\r\n " +
                    "       /// </summary>\r\n        /// <param name=\"val\">the source vector</param>\r\n" +
                    "        /// <returns>the vector</returns>\r\n        public static ");
            
            #line 476 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator +(");
            
            #line 476 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T> val) => val;

        /// <summary>Adds a scalar to the vector component-wise.</summary>
        /// <param name=""lh"">The source vector.</param>
        /// <param name=""rh"">The source scalar.</param>
        /// <returns>The summed vector.</returns>
        public static ");
            
            #line 482 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator +(");
            
            #line 482 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) => new(");
            
            #line 482 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 484 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" + rh");
            
            #line 484 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 484 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Subtracts a scalar from the vector component-wise.</summary>
        /// <param name=""lh"">The source vector.</param>
        /// <param name=""rh"">The source scalar.</param>
        /// <returns>The subtracted vector.</returns>
        public static ");
            
            #line 490 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator -(");
            
            #line 490 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) => new(");
            
            #line 490 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 492 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" - rh");
            
            #line 492 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 492 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Multiplies a scalar to the vector component-wise.</summary>
        /// <param name=""lh"">The source vector.</param>
        /// <param name=""rh"">The source scalar.</param>
        /// <returns>The multiplied vector.</returns>
        public static ");
            
            #line 498 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator *(");
            
            #line 498 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) => new(");
            
            #line 498 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 500 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" * rh");
            
            #line 500 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 500 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Divides a vector component-wise by a scalar.</summary>
        /// <param name=""lh"">The source vector.</param>
        /// <param name=""rh"">The source scalar.</param>
        /// <returns>The divided vector.</returns>
        public static ");
            
            #line 506 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator /(");
            
            #line 506 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) => new(");
            
            #line 506 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 508 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" / rh");
            
            #line 508 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 508 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Divides a vector component-wise by a scalar and returns the remainders.</summary>
        /// <param name=""lh"">The source vector.</param>
        /// <param name=""rh"">The source scalar.</param>
        /// <returns>The remainder vector.</returns>
        public static ");
            
            #line 514 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator %(");
            
            #line 514 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) => new(");
            
            #line 514 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 516 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" % rh");
            
            #line 516 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 516 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Adds a scalar to the vector component-wise.</summary>
        /// <param name=""lh"">The source scalar.</param>
        /// <param name=""rh"">The source vector.</param>
        /// <returns>The summed vector.</returns>
        public static ");
            
            #line 522 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator +(T lh, ");
            
            #line 522 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 522 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh + rh.");
            
            #line 524 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 524 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 524 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Subtracts a scalar from the vector component-wise.</summary>
        /// <param name=""lh"">The source scalar.</param>
        /// <param name=""rh"">The source vector.</param>
        /// <returns>The subtracted vector.</returns>
        public static ");
            
            #line 530 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator -(T lh, ");
            
            #line 530 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 530 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh - rh.");
            
            #line 532 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 532 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 532 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Multiplies a scalar to the vector component-wise.</summary>
        /// <param name=""lh"">The source scalar.</param>
        /// <param name=""rh"">The source vector.</param>
        /// <returns>The multiplied vector.</returns>
        public static ");
            
            #line 538 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator *(T lh, ");
            
            #line 538 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 538 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh * rh.");
            
            #line 540 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 540 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 540 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Divides a vector component-wise by a scalar.</summary>
        /// <param name=""lh"">The source scalar.</param>
        /// <param name=""rh"">The source vector.</param>
        /// <returns>The divided vector.</returns>
        public static ");
            
            #line 546 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator /(T lh, ");
            
            #line 546 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 546 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh / rh.");
            
            #line 548 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 548 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 548 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Divides a vector component-wise by a scalar and returns the remainders.</summary>
        /// <param name=""lh"">The source scalar.</param>
        /// <param name=""rh"">The source vector.</param>
        /// <returns>The remainder vector.</returns>
        public static ");
            
            #line 554 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> operator %(T lh, ");
            
            #line 554 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 554 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh % rh.");
            
            #line 556 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 556 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ");"));
            
            #line default
            #line hidden
            
            #line 556 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Returns a boolean indicating whether the two given vectors are equal.</summary>
        /// <param name=""lh"">The first vector to compare.</param>
        /// <param name=""rh"">The second vector to compare.</param>
        /// <returns>True if the vectors are equal; False otherwise.</returns>
        public static bool operator ==(");
            
            #line 562 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 562 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => ");
            
            #line 562 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 564 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" == rh.");
            
            #line 564 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 564 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? " && " : ";"));
            
            #line default
            #line hidden
            
            #line 564 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>Returns a boolean indicating whether the two given vectors are not equal.</summary>
        /// <param name=""lh"">The first vector to compare.</param>
        /// <param name=""rh"">The second vector to compare.</param>
        /// <returns>True if the vectors are not equal; False if they are equal.</returns>
        public static bool operator !=(");
            
            #line 570 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 570 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => ");
            
            #line 570 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 572 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" != rh.");
            
            #line 572 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 572 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? " || " : ";"));
            
            #line default
            #line hidden
            
            #line 572 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        #endregion

        #region Equality
        /// <summary>Returns a boolean indicating whether this vector and the given vector are equal</summary>
        /// <param name=""other"">The vector to compare this instance to.</param>
        /// <returns>True if the other vector is equal to this instance; False otherwise.</returns>
        public bool Equals(");
            
            #line 580 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> other) => ");
            
            #line 580 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            
            #line 582 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Equals(other.");
            
            #line 582 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 582 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? " && " : ";"));
            
            #line default
            #line hidden
            
            #line 582 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"

        /// <summary>Returns a boolean indicating whether the given Object is equal to this vector instance.</summary>
        /// <param name=""obj"">The Object to compare against.</param>
        /// <returns>True if the Object is equal to this Vector2D; False otherwise.</returns>
        public override bool Equals([NotNullWhen(true)] object? obj) => (obj is ");
            
            #line 588 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T> other) && Equals(other);

        /// <summary>Returns a boolean indicating whether this vector and the given vector are equal</summary>
        /// <param name=""other"">The vector to compare this instance to.</param>
        /// <returns>True if the other vector is equal to this instance; False otherwise.</returns>
        public bool Equals(Vector");
            
            #line 593 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Dimension));
            
            #line default
            #line hidden
            this.Write(" other)\r\n        {");
            
            #line 594 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
if (FloatType)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            if (typeof(T) == typeof(float))\r\n            {\r\n                if " +
                    "(Vector128.IsHardwareAccelerated)\r\n                {\r\n                    return" +
                    " Unsafe.BitCast<");
            
            #line 601 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>, Vector2>(this).AsVector128().Equals(other.AsVector128());\r\n                }" +
                    "\r\n                else\r\n                {\r\n                    return Unsafe.Bit" +
                    "Cast<");
            
            #line 605 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>, Vector2>(this).Equals(other);\r\n                }\r\n            }");
            
            #line 607 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                }
            
            #line default
            #line hidden
            this.Write("\r\n            return ");
            
            #line 610 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
for (int i = 0; i < Dimension; i++){
            
            #line default
            #line hidden
            
            #line 610 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Equals(other.");
            
            #line 610 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 610 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? " && " : ";"));
            
            #line default
            #line hidden
            
            #line 610 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public override int GetHashCode" +
                    "() => HashCode.Combine(");
            
            #line 616 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            
            #line 618 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 618 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 618 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        #endregion\r\n\r\n        #region Vector Conversions\r\n        /// <summar" +
                    "y>\r\n        /// Converts this vector into a <see cref=\"Vector64{T}\"/>\r\n        /" +
                    "// </summary>\r\n        /// <returns>the <see cref=\"Vector64{T}\"/></returns>\r\n   " +
                    "     public Vector64<T> ToVector64()\r\n        {\r\n            if (Count >= Vector" +
                    "64<T>.Count)\r\n            {\r\n                return Vector64.Create<T>(AsSpan())" +
                    ";\r\n            }\r\n\r\n            T* array = stackalloc T[Vector64<T>.Count];\r\n   " +
                    "         for (int i = 0; i < Count; i++)\r\n            {\r\n                array[i" +
                    "] = this[i];\r\n            }\r\n\r\n            return Vector64.Create<T>(new Span<T>" +
                    "(array, Vector64<T>.Count));\r\n        }\r\n\r\n        /// <summary>\r\n        /// Co" +
                    "nverts this vector into a <see cref=\"Vector128{T}\"/>\r\n        /// </summary>\r\n  " +
                    "      /// <returns>the <see cref=\"Vector128{T}\"/></returns>\r\n        public Vect" +
                    "or128<T> ToVector128()\r\n        {\r\n            if (Count >= Vector128<T>.Count)\r" +
                    "\n            {\r\n                return Vector128.Create<T>(AsSpan());\r\n         " +
                    "   }\r\n\r\n            T* array = stackalloc T[Vector128<T>.Count];\r\n            fo" +
                    "r (int i = 0; i < Count; i++)\r\n            {\r\n                array[i] = this[i]" +
                    ";\r\n            }\r\n\r\n            return Vector128.Create<T>(new Span<T>(array, Ve" +
                    "ctor128<T>.Count));\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts th" +
                    "is vector into a <see cref=\"Vector256{T}\"/>\r\n        /// </summary>\r\n        ///" +
                    " <returns>the <see cref=\"Vector256{T}\"/></returns>\r\n        public Vector256<T> " +
                    "ToVector256()\r\n        {\r\n            if (Count >= Vector256<T>.Count)\r\n        " +
                    "    {\r\n                return Vector256.Create<T>(AsSpan());\r\n            }\r\n\r\n " +
                    "           T* array = stackalloc T[Vector256<T>.Count];\r\n            for (int i " +
                    "= 0; i < Count; i++)\r\n            {\r\n                array[i] = this[i];\r\n      " +
                    "      }\r\n\r\n            return Vector256.Create<T>(new Span<T>(array, Vector256<T" +
                    ">.Count));\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts this vector" +
                    " into a <see cref=\"Vector512{T}\"/>\r\n        /// </summary>\r\n        /// <returns" +
                    ">the <see cref=\"Vector512{T}\"/></returns>\r\n        public Vector512<T> ToVector5" +
                    "12()\r\n        {\r\n            if (Count >= Vector512<T>.Count)\r\n            {\r\n  " +
                    "              return Vector512.Create<T>(AsSpan());\r\n            }\r\n\r\n          " +
                    "  T* array = stackalloc T[Vector512<T>.Count];\r\n            for (int i = 0; i < " +
                    "Count; i++)\r\n            {\r\n                array[i] = this[i];\r\n            }\r\n" +
                    "\r\n            return Vector512.Create<T>(new Span<T>(array, Vector512<T>.Count))" +
                    ";\r\n        }\r\n\r\n        //Floating Point Conversions\r\n        /// <summary>\r\n   " +
                    "     /// Converts the specified vector into a <see cref=\"");
            
            #line 705 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("{Half}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vecto" +
                    "r</param>\r\n        public static explicit operator ");
            
            #line 708 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<Half>(");
            
            #line 708 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 708 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("Half.CreateTruncating(val.");
            
            #line 710 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 710 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 710 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 713 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("{Single}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vec" +
                    "tor</param>\r\n        public static explicit operator ");
            
            #line 716 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<float>(");
            
            #line 716 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 716 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("float.CreateTruncating(val.");
            
            #line 718 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 718 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 718 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 721 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("{Double}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vec" +
                    "tor</param>\r\n        public static explicit operator ");
            
            #line 724 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<double>(");
            
            #line 724 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 724 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("double.CreateTruncating(val.");
            
            #line 726 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 726 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 726 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 729 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("{NFloat}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vec" +
                    "tor</param>\r\n        public static explicit operator ");
            
            #line 732 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<NFloat>(");
            
            #line 732 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 732 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("NFloat.CreateTruncating(val.");
            
            #line 734 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 734 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 734 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        /// <summary>\r\n        /// Converts the specified vector into a <se" +
                    "e cref=\"");
            
            #line 738 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("{Half}\"/> and checks for overflow\r\n        /// </summary>\r\n        /// <param nam" +
                    "e=\"val\">the source vector</param>\r\n        public static explicit operator check" +
                    "ed ");
            
            #line 741 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<Half>(");
            
            #line 741 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 741 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("Half.CreateChecked(val.");
            
            #line 743 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 743 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 743 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 746 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("{Single}\"/> and checks for overflow\r\n        /// </summary>\r\n        /// <param n" +
                    "ame=\"val\">the source vector</param>\r\n        public static explicit operator che" +
                    "cked ");
            
            #line 749 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<float>(");
            
            #line 749 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 749 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("float.CreateChecked(val.");
            
            #line 751 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 751 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 751 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 754 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("{Double}\"/> and checks for overflow\r\n        /// </summary>\r\n        /// <param n" +
                    "ame=\"val\">the source vector</param>\r\n        public static explicit operator che" +
                    "cked ");
            
            #line 757 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<double>(");
            
            #line 757 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 757 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("double.CreateChecked(val.");
            
            #line 759 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 759 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 759 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 762 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("{NFloat}\"/> and checks for overflow\r\n        /// </summary>\r\n        /// <param n" +
                    "ame=\"val\">the source vector</param>\r\n        public static explicit operator che" +
                    "cked ");
            
            #line 765 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<NFloat>(");
            
            #line 765 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 765 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("NFloat.CreateChecked(val.");
            
            #line 767 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 767 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 767 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");

        /// <summary>
        /// Converts the specified floating point vector to this vector type, checking for overflow
        /// </summary>
        /// <typeparam name=""TOther"">the other scalar type</typeparam>
        /// <param name=""value"">the source vector</param>
        /// <returns>the converted vector</returns>
        public static ");
            
            #line 776 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CreateChecked<TOther>(");
            
            #line 776 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<TOther> value) where TOther : unmanaged, IFloatingPointIeee754<TOther> => new(");
            
            #line 776 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CreateChecked(value.");
            
            #line 778 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 778 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 778 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Converts the specified floating point vector to this vector type, saturating any values outside of the valid range
        /// </summary>
        /// <typeparam name=""TOther"">the other scalar type</typeparam>
        /// <param name=""value"">the source vector</param>
        /// <returns>the converted vector</returns>
        public static ");
            
            #line 786 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CreateSaturating<TOther>(");
            
            #line 786 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<TOther> value) where TOther : unmanaged, IFloatingPointIeee754<TOther> => new(");
            
            #line 786 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CreateSaturating(value.");
            
            #line 788 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 788 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 788 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Converts the specified floating point vector to this vector type, truncating any values outside of the valid range
        /// </summary>
        /// <typeparam name=""TOther"">the other scalar type</typeparam>
        /// <param name=""value"">the source vector</param>
        /// <returns>the converted vector</returns>
        public static ");
            
            #line 796 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CreateTruncating<TOther>(");
            
            #line 796 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, true)));
            
            #line default
            #line hidden
            this.Write("<TOther> value) where TOther : unmanaged, IFloatingPointIeee754<TOther> => new(");
            
            #line 796 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CreateTruncating(value.");
            
            #line 798 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 798 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 798 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        //Binary Integer Conversions\r\n        /// <summary>\r\n        /// Co" +
                    "nverts the specified vector into a <see cref=\"");
            
            #line 803 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Byte}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vecto" +
                    "r</param>\r\n        public static explicit operator ");
            
            #line 806 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<byte>(");
            
            #line 806 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 806 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("byte.CreateTruncating(val.");
            
            #line 808 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 808 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 808 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 811 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{SByte}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vect" +
                    "or</param>\r\n        public static explicit operator ");
            
            #line 814 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<sbyte>(");
            
            #line 814 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 814 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("sbyte.CreateTruncating(val.");
            
            #line 816 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 816 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 816 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 819 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{UInt16}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vec" +
                    "tor</param>\r\n        public static explicit operator ");
            
            #line 822 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<ushort>(");
            
            #line 822 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 822 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("ushort.CreateTruncating(val.");
            
            #line 824 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 824 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 824 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 827 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Int16}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vect" +
                    "or</param>\r\n        public static explicit operator ");
            
            #line 830 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<short>(");
            
            #line 830 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 830 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("short.CreateTruncating(val.");
            
            #line 832 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 832 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 832 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 835 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{UInt32}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vec" +
                    "tor</param>\r\n        public static explicit operator ");
            
            #line 838 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<uint>(");
            
            #line 838 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 838 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("uint.CreateTruncating(val.");
            
            #line 840 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 840 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 840 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 843 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Int32}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vect" +
                    "or</param>\r\n        public static explicit operator ");
            
            #line 846 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<int>(");
            
            #line 846 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 846 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("int.CreateTruncating(val.");
            
            #line 848 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 848 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 848 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 851 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{UInt64}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vec" +
                    "tor</param>\r\n        public static explicit operator ");
            
            #line 854 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<ulong>(");
            
            #line 854 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 854 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("ulong.CreateTruncating(val.");
            
            #line 856 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 856 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 856 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 859 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Int64}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vect" +
                    "or</param>\r\n        public static explicit operator ");
            
            #line 862 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<long>(");
            
            #line 862 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 862 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("long.CreateTruncating(val.");
            
            #line 864 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 864 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 864 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 867 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{UInt128}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source ve" +
                    "ctor</param>\r\n        public static explicit operator ");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<UInt128>(");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("UInt128.CreateTruncating(val.");
            
            #line 872 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 872 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 872 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 875 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Int128}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vec" +
                    "tor</param>\r\n        public static explicit operator ");
            
            #line 878 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<Int128>(");
            
            #line 878 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 878 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("Int128.CreateTruncating(val.");
            
            #line 880 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 880 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 880 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 883 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{nuint}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vect" +
                    "or</param>\r\n        public static explicit operator ");
            
            #line 886 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<nuint>(");
            
            #line 886 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 886 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("nuint.CreateTruncating(val.");
            
            #line 888 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 888 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 888 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 891 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{nint}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vecto" +
                    "r</param>\r\n        public static explicit operator ");
            
            #line 894 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<nint>(");
            
            #line 894 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 894 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("nint.CreateTruncating(val.");
            
            #line 896 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 896 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 896 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        /// <summary>\r\n        /// Converts the specified vector into a <se" +
                    "e cref=\"");
            
            #line 900 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Byte}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param n" +
                    "ame=\"val\">the source vector</param>\r\n        public static explicit operator che" +
                    "cked ");
            
            #line 903 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<byte>(");
            
            #line 903 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 903 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("byte.CreateChecked(val.");
            
            #line 905 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 905 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 905 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 908 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{SByte}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param " +
                    "name=\"val\">the source vector</param>\r\n        public static explicit operator ch" +
                    "ecked ");
            
            #line 911 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<sbyte>(");
            
            #line 911 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 911 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("sbyte.CreateChecked(val.");
            
            #line 913 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 913 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 913 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 916 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{UInt16}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param" +
                    " name=\"val\">the source vector</param>\r\n        public static explicit operator c" +
                    "hecked ");
            
            #line 919 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<ushort>(");
            
            #line 919 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 919 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("ushort.CreateChecked(val.");
            
            #line 921 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 921 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 921 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 924 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Int16}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param " +
                    "name=\"val\">the source vector</param>\r\n        public static explicit operator ch" +
                    "ecked ");
            
            #line 927 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<short>(");
            
            #line 927 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 927 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("short.CreateChecked(val.");
            
            #line 929 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 929 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 929 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 932 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{UInt32}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param" +
                    " name=\"val\">the source vector</param>\r\n        public static explicit operator c" +
                    "hecked ");
            
            #line 935 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<uint>(");
            
            #line 935 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 935 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("uint.CreateChecked(val.");
            
            #line 937 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 937 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 937 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 940 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Int32}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param " +
                    "name=\"val\">the source vector</param>\r\n        public static explicit operator ch" +
                    "ecked ");
            
            #line 943 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<int>(");
            
            #line 943 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 943 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("int.CreateChecked(val.");
            
            #line 945 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 945 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 945 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 948 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{UInt64}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param" +
                    " name=\"val\">the source vector</param>\r\n        public static explicit operator c" +
                    "hecked ");
            
            #line 951 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<ulong>(");
            
            #line 951 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 951 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("ulong.CreateChecked(val.");
            
            #line 953 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 953 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 953 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 956 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Int64}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param " +
                    "name=\"val\">the source vector</param>\r\n        public static explicit operator ch" +
                    "ecked ");
            
            #line 959 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<long>(");
            
            #line 959 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 959 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("long.CreateChecked(val.");
            
            #line 961 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 961 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 961 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 964 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{UInt128}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <para" +
                    "m name=\"val\">the source vector</param>\r\n        public static explicit operator " +
                    "checked ");
            
            #line 967 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<UInt128>(");
            
            #line 967 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 967 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("UInt128.CreateChecked(val.");
            
            #line 969 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 969 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 969 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 972 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{Int128}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param" +
                    " name=\"val\">the source vector</param>\r\n        public static explicit operator c" +
                    "hecked ");
            
            #line 975 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<Int128>(");
            
            #line 975 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 975 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("Int128.CreateChecked(val.");
            
            #line 977 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 977 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 977 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 980 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{nuint}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param " +
                    "name=\"val\">the source vector</param>\r\n        public static explicit operator ch" +
                    "ecked ");
            
            #line 983 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<nuint>(");
            
            #line 983 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 983 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("nuint.CreateChecked(val.");
            
            #line 985 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 985 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 985 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 988 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("{nint}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param n" +
                    "ame=\"val\">the source vector</param>\r\n        public static explicit operator che" +
                    "cked ");
            
            #line 991 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<nint>(");
            
            #line 991 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 991 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("nint.CreateChecked(val.");
            
            #line 993 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 993 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 993 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");

        /// <summary>
        /// Converts the specified binary integer vector to this vector type, checking for overflow
        /// </summary>
        /// <typeparam name=""TOther"">the other scalar type</typeparam>
        /// <param name=""value"">the source vector</param>
        /// <returns>the converted vector</returns>
        public static ");
            
            #line 1002 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CreateChecked<TOther>(");
            
            #line 1002 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<TOther> value) where TOther : unmanaged, IBinaryInteger<TOther> => new(");
            
            #line 1002 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CreateChecked(value.");
            
            #line 1004 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 1004 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1004 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Converts the specified binary integer vector to this vector type, saturating any values outside of the valid range
        /// </summary>
        /// <typeparam name=""TOther"">the other scalar type</typeparam>
        /// <param name=""value"">the source vector</param>
        /// <returns>the converted vector</returns>
        public static ");
            
            #line 1012 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CreateSaturating<TOther>(");
            
            #line 1012 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<TOther> value) where TOther : unmanaged, IBinaryInteger<TOther> => new(");
            
            #line 1012 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CreateSaturating(value.");
            
            #line 1014 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 1014 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1014 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Converts the specified binary integer vector to this vector type, truncating any values outside of the valid range
        /// </summary>
        /// <typeparam name=""TOther"">the other scalar type</typeparam>
        /// <param name=""value"">the source vector</param>
        /// <returns>the converted vector</returns>
        public static ");
            
            #line 1022 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CreateTruncating<TOther>(");
            
            #line 1022 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<TOther> value) where TOther : unmanaged, IBinaryInteger<TOther> => new(");
            
            #line 1022 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CreateTruncating(value.");
            
            #line 1024 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 1024 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1024 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        //System.Numerics Conversions\r\n\r\n        ");
            
            #line 1029 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
 if (Dimension < 5 && Dimension > 1)
        {
            
            #line default
            #line hidden
            this.Write("/// <summary>\r\n        /// Converts the specified vector into a <see cref=\"Vector" +
                    "");
            
            #line 1031 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Dimension));
            
            #line default
            #line hidden
            this.Write("\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vector</par" +
                    "am>\r\n        public static explicit operator Vector");
            
            #line 1034 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Dimension));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 1034 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 1034 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("float.CreateTruncating(val.");
            
            #line 1036 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 1036 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1036 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 1039 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("{T}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vector</" +
                    "param>\r\n        public static explicit operator ");
            
            #line 1042 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>(Vector");
            
            #line 1042 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Dimension));
            
            #line default
            #line hidden
            this.Write(" val) => new(");
            
            #line 1042 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CreateTruncating(val.");
            
            #line 1044 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 1044 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1044 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        /// <summary>\r\n        /// Converts the specified vector into a <se" +
                    "e cref=\"Vector");
            
            #line 1048 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Dimension));
            
            #line default
            #line hidden
            this.Write("\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param name=\"v" +
                    "al\">the source vector</param>\r\n        public static explicit operator checked V" +
                    "ector");
            
            #line 1051 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Dimension));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 1051 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 1051 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("float.CreateChecked(val.");
            
            #line 1053 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 1053 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1053 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see " +
                    "cref=\"");
            
            #line 1056 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("{T}\"/> and checking for overflow\r\n        /// </summary>\r\n        /// <param name" +
                    "=\"val\">the source vector</param>\r\n        public static explicit operator checke" +
                    "d ");
            
            #line 1059 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>(Vector");
            
            #line 1059 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Dimension));
            
            #line default
            #line hidden
            this.Write(" val) => new(");
            
            #line 1059 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CreateChecked(val.");
            
            #line 1061 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 1061 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1061 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        ");
            
            #line 1063 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// Converts the specified vector into a <see cr" +
                    "ef=\"Vector64{T}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the so" +
                    "urce vector</param>\r\n        public static explicit operator Vector64<T>(");
            
            #line 1069 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T> val) => val.ToVector64();
        /// <summary>
        /// Converts the specified vector into a <see cref=""Vector128{T}""/>
        /// </summary>
        /// <param name=""val"">the source vector</param>
        public static explicit operator Vector128<T>(");
            
            #line 1074 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T> val) => val.ToVector128();
        /// <summary>
        /// Converts the specified vector into a <see cref=""Vector256{T}""/>
        /// </summary>
        /// <param name=""val"">the source vector</param>
        public static explicit operator Vector256<T>(");
            
            #line 1079 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T> val) => val.ToVector256();
        /// <summary>
        /// Converts the specified vector into a <see cref=""Vector512{T}""/>
        /// </summary>
        /// <param name=""val"">the source vector</param>
        public static explicit operator Vector512<T>(");
            
            #line 1084 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => val.ToVector512();\r\n\r\n        //lower dimension Conversions\r\n        " +
                    "");
            
            #line 1087 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
for (int dim = MinDim; dim < Dimension; dim++)
            {
            
            #line default
            #line hidden
            this.Write("/// <summary>\r\n        /// Converts the specified vector into a <see cref=\"");
            
            #line 1089 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(dim, FloatType)));
            
            #line default
            #line hidden
            this.Write("{T}\"/>\r\n        /// </summary>\r\n        /// <param name=\"val\">the source vector</" +
                    "param>\r\n        public static explicit operator ");
            
            #line 1092 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(dim, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>(");
            
            #line 1092 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 1092 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < dim; i++)
                            {
            
            #line default
            #line hidden
            
            #line 1094 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 1094 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < dim - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1094 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        ");
            
            #line 1096 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
        #endregion

        #region List
        /// <inheritdoc/>
        T IReadOnlyList<T>.this[int index] => AsSpan()[index];

        /// <inheritdoc/>
        public IEnumerator<T> GetEnumerator() => new Enumerator(this);

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private class Enumerator(");
            
            #line 1110 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Vector) : IEnumerator<T>\r\n        {\r\n            private int _index = -1;\r\n\r\n" +
                    "            /// <inheritdoc/>\r\n            public T Current => Vector[_index];\r\n" +
                    "\r\n            /// <inheritdoc/>\r\n            object IEnumerator.Current => Curre" +
                    "nt;\r\n\r\n            /// <inheritdoc/>\r\n            public void Dispose() { }\r\n\r\n " +
                    "           /// <inheritdoc/>\r\n            public bool MoveNext()\r\n            {\r" +
                    "\n                _index++;\r\n                return _index >= Vector.Count;\r\n    " +
                    "        }\r\n\r\n            /// <inheritdoc/>\r\n            public void Reset() => _" +
                    "index = -1;\r\n        }\r\n        #endregion\r\n\r\n        #region Format\r\n        //" +
                    "/ <summary>Returns the string representation of the current instance using defau" +
                    "lt formatting.</summary>\r\n        /// <returns>The string representation of the " +
                    "current instance.</returns>\r\n        /// <remarks>This method returns a string i" +
                    "n which each element of the vector is formatted using the \"G\" (general) format s" +
                    "tring and the formatting conventions of the current thread culture. The \"&lt;\" a" +
                    "nd \"&gt;\" characters are used to begin and end the string, and the current cultu" +
                    "re\'s <see cref=\"NumberFormatInfo.NumberGroupSeparator\" /> property followed by a" +
                    " space is used to separate each element.</remarks>\r\n        public override stri" +
                    "ng ToString()\r\n        {\r\n            return ToString(\"G\", null);\r\n        }\r\n\r\n" +
                    "        /// <summary>Returns the string representation of the current instance u" +
                    "sing the specified format string to format individual elements.</summary>\r\n     " +
                    "   /// <param name=\"format\">A standard or custom numeric format string that defi" +
                    "nes the format of individual elements.</param>\r\n        /// <returns>The string " +
                    "representation of the current instance.</returns>\r\n        /// <remarks>This met" +
                    "hod returns a string in which each element of the vector is formatted using <par" +
                    "amref name=\"format\" /> and the current culture\'s formatting conventions. The \"&l" +
                    "t;\" and \"&gt;\" characters are used to begin and end the string, and the current " +
                    "culture\'s <see cref=\"NumberFormatInfo.NumberGroupSeparator\" /> property followed" +
                    " by a space is used to separate each element.</remarks>\r\n        /// <related ty" +
                    "pe=\"Article\" href=\"/dotnet/standard/base-types/standard-numeric-format-strings\">" +
                    "Standard Numeric Format Strings</related>\r\n        /// <related type=\"Article\" h" +
                    "ref=\"/dotnet/standard/base-types/custom-numeric-format-strings\">Custom Numeric F" +
                    "ormat Strings</related>\r\n        public string ToString([StringSyntax(StringSynt" +
                    "axAttribute.NumericFormat)] string? format)\r\n        {\r\n            return ToStr" +
                    "ing(format, null);\r\n        }\r\n\r\n        /// <summary>Returns the string represe" +
                    "ntation of the current instance using the specified format string to format indi" +
                    "vidual elements and the specified format provider to define culture-specific for" +
                    "matting.</summary>\r\n        /// <param name=\"format\">A standard or custom numeri" +
                    "c format string that defines the format of individual elements.</param>\r\n       " +
                    " /// <param name=\"formatProvider\">A format provider that supplies culture-specif" +
                    "ic formatting information.</param>\r\n        /// <returns>The string representati" +
                    "on of the current instance.</returns>\r\n        /// <remarks>This method returns " +
                    "a string in which each element of the vector is formatted using <paramref name=\"" +
                    "format\" /> and <paramref name=\"formatProvider\" />. The \"&lt;\" and \"&gt;\" charact" +
                    "ers are used to begin and end the string, and the format provider\'s <see cref=\"N" +
                    "umberFormatInfo.NumberGroupSeparator\" /> property followed by a space is used to" +
                    " separate each element.</remarks>\r\n        /// <related type=\"Article\" href=\"/do" +
                    "tnet/standard/base-types/standard-numeric-format-strings\">Standard Numeric Forma" +
                    "t Strings</related>\r\n        /// <related type=\"Article\" href=\"/dotnet/standard/" +
                    "base-types/custom-numeric-format-strings\">Custom Numeric Format Strings</related" +
                    ">\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFor" +
                    "mat)] string? format, IFormatProvider? formatProvider)\r\n        {\r\n            s" +
                    "tring separator = NumberFormatInfo.GetInstance(formatProvider).NumberGroupSepara" +
                    "tor;\r\n\r\n            Span<char> initialBuffer = stackalloc char[Math.Min((2 + (Co" +
                    "unt - 1) + (separator.Length * (Count - 1)) + (Count * 2)), 256)];\r\n\r\n          " +
                    "  // We can\'t use an interpolated string here because it won\'t allow us to pass " +
                    "`format`\r\n            DefaultInterpolatedStringHandler handler = new(\r\n         " +
                    "       4 + (separator.Length * 2),\r\n                Count,\r\n                form" +
                    "atProvider,\r\n                initialBuffer\r\n            );\r\n\r\n            handle" +
                    "r.AppendLiteral(\"(\");");
            
            #line 1176 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            handler.AppendFormatted(");
            
            #line 1180 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", format);");
            
            #line 1180 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
 if (i < Dimension - 1)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            handler.AppendLiteral(separator);\r\n            handler.AppendLitera" +
                    "l(\" \");");
            
            #line 1184 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
                }
            
            #line default
            #line hidden
            this.Write(@"
            handler.AppendLiteral("")"");

            return handler.ToStringAndClear();
        }

        /// <inheritdoc/>
        public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        {
            string separator = NumberFormatInfo.GetInstance(provider).NumberGroupSeparator;

            // We can't use an interpolated string here because it won't allow us to pass `format`
            MemoryExtensions.TryWriteInterpolatedStringHandler handler = new(
                4 + (separator.Length * 2),
                Count,
                destination,
                provider,
                out bool shouldAppend
            );
            if (!shouldAppend)
            {
                charsWritten = 0;
                return false;
            }

            // Annoyingly we need to turn the span into a string for the string handler
            string? formatString = format.Length > 0 ? new string(format) : null;

            _ =
                handler.AppendLiteral(""("") &&");
            
            #line 1215 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            handler.AppendFormatted(");
            
            #line 1219 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", formatString) &&");
            
            #line 1219 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
 if (i < Dimension - 1)
                    {
            
            #line default
            #line hidden
            this.Write("\r\n            handler.AppendLiteral(separator) &&\r\n            handler.AppendLite" +
                    "ral(\" \") &&");
            
            #line 1223 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                        }
                    }
            
            #line default
            #line hidden
            this.Write(@"
            handler.AppendLiteral("")"");

            return destination.TryWrite(ref handler, out charsWritten);
        }

        /// <inheritdoc/>
        public bool TryFormat(Span<byte> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        {
            charsWritten = 0;
            byte[] openBracket = Encoding.UTF8.GetBytes(""("");
            byte[] separator = Encoding.UTF8.GetBytes(NumberFormatInfo.GetInstance(provider).NumberGroupSeparator);
            byte[] space = Encoding.UTF8.GetBytes("" "");
            byte[] closeBracket = Encoding.UTF8.GetBytes("")"");

            ");
            
            #line 1241 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("                \r\n            byte[] ");
            
            #line 1245 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("Bytes = Encoding.UTF8.GetBytes(");
            
            #line 1245 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".ToString(new(format), provider));\r\n            charsWritten += ");
            
            #line 1246 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("Bytes.Length;");
            
            #line 1246 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                    }
            
            #line default
            #line hidden
            this.Write(@"
            charsWritten += separator.Length + openBracket.Length + closeBracket.Length + space.Length;

            if (charsWritten > destination.Length)
            {
                charsWritten = 0;
                return false;
            }

            charsWritten = 0;
            for (int i = 0; i < openBracket.Length; i++)
                destination[charsWritten++] = openBracket[i];");
            
            #line 1259 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            for (int i = 0; i < ");
            
            #line 1263 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("Bytes.Length; i++)\r\n                destination[charsWritten++] = ");
            
            #line 1264 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("Bytes[i];");
            
            #line 1264 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
 
                    if (i < Dimension - 1)
                    {
            
            #line default
            #line hidden
            this.Write("\r\n            for (int i = 0; i < separator.Length; i++)\r\n                destina" +
                    "tion[charsWritten++] = separator[i];\r\n            for (int i = 0; i < space.Leng" +
                    "th; i++)\r\n                destination[charsWritten++] = space[i];");
            
            #line 1271 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                        }
                    }
            
            #line default
            #line hidden
            this.Write("\r\n            for (int i = 0; i < closeBracket.Length; i++)\r\n                dest" +
                    "ination[charsWritten++] = closeBracket[i];\r\n\r\n            return true;\r\n        " +
                    "}\r\n        #endregion\r\n\r\n        #region Parse\r\n        /// <inheritdoc/>\r\n     " +
                    "   static ");
            
            #line 1284 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> IParsable<");
            
            #line 1284 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>.Parse(string s, IFormatProvider? provider)\r\n            => Parse(s.AsSpan()," +
                    " NumberStyles.None, provider);\r\n\r\n        /// <inheritdoc/>\r\n        static ");
            
            #line 1288 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ISpanParsable<");
            
            #line 1288 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>.Parse(ReadOnlySpan<char> s, IFormatProvider? provider)\r\n            => Parse" +
                    "(s, NumberStyles.None, provider);\r\n\r\n        /// <inheritdoc/>\r\n        static ");
            
            #line 1292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> IUtf8SpanParsable<");
            
            #line 1292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>>.Parse(ReadOnlySpan<byte> s, IFormatProvider? provider)\r\n            => Parse" +
                    "(s, NumberStyles.None, provider);\r\n\r\n        /// <inheritdoc/>\r\n        public s" +
                    "tatic ");
            
            #line 1296 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Parse(string s, NumberStyles style = default, IFormatProvider? provider = nul" +
                    "l)\r\n            => Parse(s.AsSpan(), style, provider);\r\n\r\n        /// <inheritdo" +
                    "c/>\r\n        public static ");
            
            #line 1300 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Parse(ReadOnlySpan<char> s, NumberStyles style = NumberStyles.None, IFormatPr" +
                    "ovider? provider = null)\r\n            => TryParse(s, style, provider, out var re" +
                    "sult) ? result : throw new ArgumentException($\"Failed to parse {nameof(");
            
            #line 1301 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>)}<{typeof(T)}>\");\r\n\r\n        /// <inheritdoc/>\r\n        public static ");
            
            #line 1304 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Parse(ReadOnlySpan<byte> s, NumberStyles style = NumberStyles.None, IFormatPr" +
                    "ovider? provider = null)\r\n            => TryParse(s, style, provider, out var re" +
                    "sult) ? result : throw new ArgumentException($\"Failed to parse {nameof(");
            
            #line 1305 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>)}<{typeof(T)}>\");\r\n\r\n        /// <inheritdoc/>\r\n        public static bool Tr" +
                    "yParse(string? s, IFormatProvider? provider, out ");
            
            #line 1308 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> result)\r\n            => TryParse(s.AsSpan(), NumberStyles.None, provider, out" +
                    " result);\r\n\r\n        /// <inheritdoc/>\r\n        public static bool TryParse(stri" +
                    "ng? s, NumberStyles style, IFormatProvider? provider, out ");
            
            #line 1312 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> result)\r\n            => TryParse(s.AsSpan(), style, provider, out result);\r\n\r" +
                    "\n        /// <inheritdoc/>\r\n        public static bool TryParse(ReadOnlySpan<cha" +
                    "r> s, IFormatProvider? provider, out ");
            
            #line 1316 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> result)\r\n            => TryParse(s, NumberStyles.None, provider, out result);" +
                    "\r\n\r\n        /// <inheritdoc/>\r\n        public static bool TryParse(ReadOnlySpan<" +
                    "char> s, NumberStyles style, IFormatProvider? provider, out ");
            
            #line 1320 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T> result)
        {
            result = default;

            if (s[0] != '(')
                return false;
            if (s[^1] != ')')
                return false;

            string separator = NumberFormatInfo.GetInstance(provider).NumberGroupSeparator;

            s = s[1..^1];
            ");
            
            #line 1332 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("            \r\n            T ");
            
            #line 1336 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 1336 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
 if (i < Dimension - 1)
                    {
            
            #line default
            #line hidden
            this.Write(@"
            {
                if (s.Length == 0)
                    return false;

                int nextNumber = s.IndexOf(separator);
                if (nextNumber == -1)
                {
                    return false;
                }

                if (!T.TryParse(s[..nextNumber], style, provider, out ");
            
            #line 1349 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("))\r\n                    return false;\r\n\r\n                s = s[(nextNumber + sepa" +
                    "rator.Length)..];\r\n            }");
            
            #line 1353 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            else
            {
            
            #line default
            #line hidden
            this.Write("\r\n            {\r\n                if (s.Length == 0)\r\n                    return f" +
                    "alse;\r\n\r\n                if (!T.TryParse(s, style, provider, out ");
            
            #line 1361 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("))\r\n                    return false;\r\n            }");
            
            #line 1363 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                }
            }
            
            #line default
            #line hidden
            this.Write("\r\n\r\n            result = new ");
            
            #line 1368 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>(");
            
            #line 1368 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            
            #line 1370 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            
            #line 1370 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1370 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n            return true;\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        pub" +
                    "lic static bool TryParse(ReadOnlySpan<byte> s, IFormatProvider? provider, out ");
            
            #line 1376 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> result)\r\n            => TryParse(s, NumberStyles.None, provider, out result);" +
                    "\r\n\r\n        /// <inheritdoc/>\r\n        public static bool TryParse(ReadOnlySpan<" +
                    "byte> s, NumberStyles style, IFormatProvider? provider, out ");
            
            #line 1380 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T> result)
        {
            result = default;

            if (s[0] != '(')
                return false;
            if (s[^1] != ')')
                return false;

            byte[]? separator = Encoding.UTF8.GetBytes(NumberFormatInfo.GetInstance(provider).NumberGroupSeparator);

            s = s[1..^1];
            ");
            
            #line 1392 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            T ");
            
            #line 1396 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 1396 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
 if (i < Dimension - 1)
            {
            
            #line default
            #line hidden
            this.Write(@"
            {
                if (s.Length == 0)
                    return false;

                int nextNumber = s.IndexOf(separator);
                if (nextNumber == -1)
                {
                    return false;
                }

                if (!T.TryParse(s[..nextNumber], style, provider, out ");
            
            #line 1409 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("))\r\n                    return false;\r\n\r\n                s = s[(nextNumber + sepa" +
                    "rator.Length)..];\r\n            }");
            
            #line 1413 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
}
            else
            {
            
            #line default
            #line hidden
            this.Write("\r\n            {\r\n                if (s.Length == 0)\r\n                    return f" +
                    "alse;\r\n\r\n                if (!T.TryParse(s, style, provider, out ");
            
            #line 1421 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            this.Write("))\r\n                    return false;\r\n            }");
            
            #line 1423 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                }
            }
            
            #line default
            #line hidden
            this.Write("\r\n\r\n            result = new ");
            
            #line 1428 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>(");
            
            #line 1428 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            
            #line 1430 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i, false)));
            
            #line default
            #line hidden
            
            #line 1430 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1430 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
            return true;
        }
        #endregion

        #region Swizzle
        /// <summary>
        /// Get the swizzle operators for this vector
        /// </summary>
        public SwizzleOperators Swizzle => new (ref Unsafe.AsRef(in this));

        /// <summary>
        /// A structure that handles swizzle operations for this vector
        /// </summary>
        public ref struct SwizzleOperators
        {
            private ref ");
            
            #line 1447 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> _vector;\r\n\r\n            /// <summary>\r\n            /// Creates a Swizzle oper" +
                    "ator from the given vector\r\n            /// </summary>\r\n            /// <param n" +
                    "ame=\"vector\">the source vector</param>\r\n            public SwizzleOperators(ref " +
                    "");
            
            #line 1453 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector)\r\n            {\r\n                _vector = ref vector;\r\n            }\r" +
                    "\n\r\n            ");
            
            #line 1458 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                for (int destDim = MinDim; destDim <= MaxDim; destDim++)
                {
                    int[] indices = new int[destDim];
                    while(true)
                    {
            
            #line default
            #line hidden
            this.Write("            /// <summary>\r\n            /// retrieve a <see cref=\"");
            
            #line 1465 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(destDim, FloatType)));
            
            #line default
            #line hidden
            this.Write("{T}\"/> whose components are (");
            
            #line 1465 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSwizzleName(indices, ", ")));
            
            #line default
            #line hidden
            this.Write(")\r\n            /// when assigned to components are assigned based on the first ma" +
                    "tching component\r\n            /// </summary>\r\n            public ");
            
            #line 1468 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(destDim, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ");
            
            #line 1468 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSwizzleName(indices, "")));
            
            #line default
            #line hidden
            this.Write("\r\n            {\r\n                get => new(_vector.");
            
            #line 1470 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSwizzleName(indices, ", _vector.")));
            
            #line default
            #line hidden
            this.Write(");\r\n                ");
            
            #line 1471 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
if (!Immutable) {
            
            #line default
            #line hidden
            this.Write("set\r\n                {");
            
            #line 1472 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                        bool[] found = new bool[Dimension];
                        for (int i = 0; i < indices.Length; i++)
                        {
                            if (found[indices[i]])
                                continue;
                            found[indices[i]] = true; 
            
            #line default
            #line hidden
            this.Write("\r\n                    _vector.");
            
            #line 1480 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(indices[i])));
            
            #line default
            #line hidden
            this.Write(" = value.");
            
            #line 1480 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 1480 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                        }}
            
            #line default
            #line hidden
            this.Write("\r\n                }\r\n            }");
            
            #line 1484 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                        
                        int index = 0;
                        while (++indices[index] == Dimension)
                        {
                            indices[index++] = 0;

                            if (index >= indices.Length)
                                break;
                        }
                        if (index >= indices.Length)
                                break;
                    }
                }
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        #endregion\r\n\r\n");
            
            #line 1502 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

    if (FloatType)
    {
            
            #line default
            #line hidden
            this.Write(@"        #region Floating Point Specific
        /// <summary>
        /// the length of the vector
        /// </summary>
        public T Length => T.Sqrt(LengthSquared);

        /// <summary>
        /// Gets a vector whose components are all equal to Positive Infinity
        /// </summary>
        public static ");
            
            #line 1514 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> PositiveInfinity => new(T.PositiveInfinity);\r\n        /// <summary>\r\n        " +
                    "/// Gets a vector whose components are all equal to Negative Infinity\r\n        /" +
                    "// </summary>\r\n        public static ");
            
            #line 1518 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> NegativeInfinity => new(T.NegativeInfinity);\r\n        /// <summary>\r\n        " +
                    "/// Gets a vector whose components are all equal to NaN\r\n        /// </summary>\r" +
                    "\n        public static ");
            
            #line 1522 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> NaN => new(T.NaN);\r\n        /// <summary>\r\n        /// Gets a vector whose co" +
                    "mponents are all equal to Epsilon\r\n        /// </summary>\r\n        public static" +
                    " ");
            
            #line 1526 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Epsilon => new(T.Epsilon);\r\n        /// <summary>\r\n        /// Gets a vector " +
                    "whose components are all equal to Negative Zero\r\n        /// </summary>\r\n       " +
                    " public static ");
            
            #line 1530 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> NegativeZero => new(T.NegativeZero);\r\n        /// <summary>\r\n        /// Gets" +
                    " a vector whose components are all equal to Pi\r\n        /// </summary>\r\n        " +
                    "public static ");
            
            #line 1534 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Pi => new(T.Pi);\r\n        /// <summary>\r\n        /// Gets a vector whose comp" +
                    "onents are all equal to Tau\r\n        /// </summary>\r\n        public static ");
            
            #line 1538 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Tau => new(T.Tau);\r\n        /// <summary>\r\n        /// Gets a vector whose co" +
                    "mponents are all equal to E\r\n        /// </summary>\r\n        public static ");
            
            #line 1542 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> E => new(T.E);\r\n\r\n        /// <summary>\r\n        /// Normalizes this vector s" +
                    "o that its length is equal to one\r\n        /// </summary>\r\n        public ");
            
            #line 1547 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Normalize() => ");
            
            #line 1547 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Normalize(this);\r\n        #endregion\r\n");
            
            #line 1549 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

    }
    else
    {
            
            #line default
            #line hidden
            this.Write("        #region Integer Specific\r\n        /// <summary>\r\n        /// Gets a vecto" +
                    "r whose components are all integers with all bits set\r\n        /// </summary>\r\n " +
                    "       public static ");
            
            #line 1557 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write(@"<T> AllBitsSet => new(T.AllBitsSet);

        /// <summary>
        /// And the components of the source vectors
        /// </summary>
        /// <param name=""lh"">the first source vector</param>
        /// <param name=""rh"">the second source vector</param>
        /// <returns>the anded vector</returns>
        public static ");
            
            #line 1565 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator &(");
            
            #line 1565 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> lh,  ");
            
            #line 1565 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 1565 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 1567 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" & rh.");
            
            #line 1567 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 1567 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1567 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Or the components of the source vectors
        /// </summary>
        /// <param name=""lh"">the first source vector</param>
        /// <param name=""rh"">the second source vector</param>
        /// <returns>the or'd vector</returns>
        public static ");
            
            #line 1575 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator |(");
            
            #line 1575 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 1575 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 1575 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 1577 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" | rh.");
            
            #line 1577 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 1577 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1577 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// XOR the components of the source vectors
        /// </summary>
        /// <param name=""lh"">the first source vector</param>
        /// <param name=""rh"">the second source vector</param>
        /// <returns>the xor'd vector</returns>
        public static ");
            
            #line 1585 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator ^(");
            
            #line 1585 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 1585 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 1585 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 1587 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" ^ rh.");
            
            #line 1587 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 1587 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1587 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");

        /// <summary>
        /// And the components of the source vector with the source scalar
        /// </summary>
        /// <param name=""lh"">the source vector</param>
        /// <param name=""rh"">the source scalar</param>
        /// <returns>the anded vector</returns>
        public static ");
            
            #line 1596 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator &(");
            
            #line 1596 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) => new(");
            
            #line 1596 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 1598 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" & rh.");
            
            #line 1598 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1598 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Or the components of the source vector with the source scalar
        /// </summary>
        /// <param name=""lh"">the source vector</param>
        /// <param name=""rh"">the source scalar</param>
        /// <returns>the or'd vector</returns>
        public static ");
            
            #line 1606 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator |(");
            
            #line 1606 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) => new(");
            
            #line 1606 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 1608 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" | rh.");
            
            #line 1608 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1608 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// XOR the components of the source vector with the source scalar
        /// </summary>
        /// <param name=""lh"">the source vector</param>
        /// <param name=""rh"">the source scalar</param>
        /// <returns>the xor'd vector</returns>
        public static ");
            
            #line 1616 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator ^(");
            
            #line 1616 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) => new(");
            
            #line 1616 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 1618 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" ^ rh.");
            
            #line 1618 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1618 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");

        /// <summary>
        /// And the components of the source vector with the source scalar
        /// </summary>
        /// <param name=""lh"">the source scalar</param>
        /// <param name=""rh"">the source vector</param>
        /// <returns>the anded vector</returns>
        public static ");
            
            #line 1627 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator &(T lh, ");
            
            #line 1627 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 1627 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh & rh.");
            
            #line 1629 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 1629 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1629 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Or the components of the source vector with the source scalar
        /// </summary>
        /// <param name=""lh"">the source scalar</param>
        /// <param name=""rh"">the source vector</param>
        /// <returns>the or'd vector</returns>
        public static ");
            
            #line 1637 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator |(T lh, ");
            
            #line 1637 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 1637 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh | rh.");
            
            #line 1639 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 1639 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1639 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// XOR the components of the source vector with the source scalar
        /// </summary>
        /// <param name=""lh"">the source scalar</param>
        /// <param name=""rh"">the source vector</param>
        /// <returns>the xor'd vector</returns>
        public static ");
            
            #line 1647 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator ^(T lh, ");
            
            #line 1647 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> rh) => new(");
            
            #line 1647 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh ^ rh.");
            
            #line 1649 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 1649 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1649 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        /// <summary>\r\n        /// Not the components of the given vector\r\n" +
                    "        /// </summary>\r\n        /// <param name=\"val\">the source vector</param>\r" +
                    "\n        /// <returns>The not\'d vector</returns>\r\n        public static ");
            
            #line 1657 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> operator ~(");
            
            #line 1657 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> val) => new(");
            
            #line 1657 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("~val.");
            
            #line 1659 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 1659 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1659 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n        #endregion\r\n");
            
            #line 1663 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

    }
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1667 "D:\Silk\A\eng\generation\Silk.Maths.Generation\BaseVector.tt"

        public string GetName(int dimension, bool floatType)
        {
            return "Vector" + dimension + (floatType ? "F" : "I");
        }

        private string GetComponentName(int dimension, bool Caps = true)
        {
            switch (dimension)
            {
                default:
                case 0:
                    return Caps ? "X" : "x";
                case 1:
                    return Caps ? "Y" : "y";
                case 2:
                    return Caps ? "Z" : "z";
                case 3:
                    return Caps ? "W" : "w";
                case 4:
                    return Caps ? "V" : "v";
                case 5:
                    return Caps ? "U" : "u";
            }
        }

        public string GetSwizzleName(int[] components, string separator)
        {
            string st = "";
            for (int i = 0; i < components.Length; i++)
            {
                st += GetComponentName(components[i]) + ((i < components.Length - 1) ? separator : "");
            }
            return st;
        }

        private string ForEachComponent(int dimensions, string prefix, string separator, string postfix, bool Caps = true, int start = 0)
        {
            string st = prefix;
            for (int i = start; i < dimensions; i++)
            {
                st += GetComponentName(i, Caps);

                if (i < dimensions - 1)
                {
                    st += separator;
                }
            }
            st += postfix;
        
        return st;
        }

        private string ForEachComponent(int dimensions, string prefix, string val, string separator, string postfix, int start = 0)
        {
            string st = prefix;
            for (int i = 0; i < dimensions; i++)
            {
                st += val;

                if (i < dimensions - 1)
                {
                    st += separator;
                }
            }
            st += postfix;
        
        return st;
        }

        private bool IsPowerOfTwo(int i)
        {
            return (i != 0) && ((i & (i - 1)) == 0);
        }

        private string GetMatrixMultiplication(int matrixRows, int matrixCols, int dimension, bool floatType, string vectorName, string matrixName, bool homogenous)
        {
            string ret;
            string components;
            if (matrixRows < dimension)
            {
                components = "";
                for (int i = 0; i < matrixRows; i++)
                    components += GetComponentName(i);
                ret = "(" + vectorName + ".Swizzle." + components + " * " + matrixName + ")";
            }
            else if (matrixRows == dimension)
            {
                ret = "(" + vectorName + " * " + matrixName + ")";
            }
            else
            {
                ret = "(new Vector" + dimension + (floatType ? "F" : "I") + "<T>(";
                for (int i = 0; i < dimension; i++)
                    ret += vectorName + "." + GetComponentName(i) + (i < dimension - 1 ? ", " : ") * ");
                ret += matrixName + ")";
            }

            if (matrixCols > dimension)
            {
                components = "";
                for (int i = 0; i < dimension; i++)
                    components += GetComponentName(i);
                ret += "Swizzle." + components;
            }
            else if (matrixCols < dimension)
            {
                int diff = dimension - matrixCols;
                components = "";
                for (int i = 0; i < diff; i++)
                    components += (i < diff - 2 || !homogenous ? "T.Zero" : "T.One") + (i < diff - 1 ? ", " : ")");
                ret = "new Vector" + dimension + (floatType ? "F" : "I") + "<T>(" + ret + components;
            }

            return ret + ";";
}
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class BaseVectorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
