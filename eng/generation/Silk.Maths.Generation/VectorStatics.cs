// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Silk.Maths.Generation
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class VectorStatics : VectorStaticsBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"// ============================================= THIS FILE IS AUTOGENERATED ============================================
// =================== Please make any edits in eng/generation/Silk.Maths.Generation/VectorStatics.tt! ====================
// ============================================= THIS FILE IS AUTOGENERATED ============================================

using System;
using System.Collections;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Serialization;
using System.Text;

namespace Silk.NET.Maths
{
    public static class ");
            
            #line 20 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"
    {
        #region Operators
        /// <summary>
        /// Calculate the dot product of two vectors
        /// </summary>
        /// <param name=""lh"">the first source vector</param>
        /// <param name=""rh"">the second source vector</param>
        /// <returns>the dot product</returns>
        public static T Dot<T>(");
            
            #line 29 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 29 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) ");
            
            #line 29 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {");
            
            #line 30 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
if (IsPowerOfTwo(Dimension)){
            
            #line default
            #line hidden
            this.Write("            \r\n            switch (Unsafe.SizeOf<T>())\r\n            {");
            
            #line 33 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                    for (int size = 1; size <= 32; size <<= 1)
                    {
                        int vectorSize = int.Max(64, (size << 3) * Dimension);
                        if (vectorSize > 512) continue; 
            
            #line default
            #line hidden
            this.Write("\r\n                case ");
            
            #line 39 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(size));
            
            #line default
            #line hidden
            this.Write(":\r\n                    if (Vector");
            
            #line 40 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T>.IsSupported && Vector");
            
            #line 40 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write(".IsHardwareAccelerated)\r\n                    {\r\n                        Vector");
            
            #line 42 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("<T> result = lh.ToVector");
            
            #line 42 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("() * lh.ToVector");
            
            #line 42 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vectorSize));
            
            #line default
            #line hidden
            this.Write("();\r\n                        return ");
            
            #line 43 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("result[");
            
            #line 45 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("]");
            
            #line 45 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? " + " : ";"));
            
            #line default
            #line hidden
            
            #line 45 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                    }\r\n                break;\r\n                ");
            
            #line 49 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            }\r\n            ");
            
            #line 52 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write("return ");
            
            #line 52 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("lh.");
            
            #line 54 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" * rh.");
            
            #line 54 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            
            #line 54 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? " + " : ";"));
            
            #line default
            #line hidden
            
            #line 54 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n\r\n        ");
            
            #line 58 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

            if (Dimension == 3)
            {
            
            #line default
            #line hidden
            this.Write(@"/// <summary>
        /// Calculate the cross product of two vectors
        /// </summary>
        /// <param name=""lh"">the first source vector</param>
        /// <param name=""rh"">the second source vector</param>
        /// <returns>the dot product</returns>
        public static ");
            
            #line 66 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Cross<T>(");
            
            #line 66 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 66 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) ");
            
            #line 66 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new((lh.Y * rh.Z) - (lh.Z * rh.Y), (lh.Z * rh.X) " +
                    "- (lh.X * rh.Z), (lh.X * rh.Y) - (lh.Y * rh.X));\r\n        }\r\n        ");
            
            #line 70 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@"/// <summary>
        /// Returns a vector whose components are the maximum of each of the pairs of components in the two source vectors
        /// </summary>
        /// <param name=""lh"">the first source vector</param>
        /// <param name=""rh"">the second source vector</param>
        /// <returns>the max vector</returns>
        public static ");
            
            #line 76 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Max<T>(");
            
            #line 76 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 76 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) ");
            
            #line 76 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 78 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Max(lh.");
            
            #line 79 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", rh.");
            
            #line 79 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 79 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 79 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Returns a vector whose components are the maximum of a component of the source vector and a scalar
        /// </summary>
        /// <param name=""lh"">the source vector</param>
        /// <param name=""rh"">the source scalar</param>
        /// <returns>the max vector</returns>
        public static ");
            
            #line 87 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Max<T>(");
            
            #line 87 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) ");
            
            #line 87 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 89 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Max(lh.");
            
            #line 90 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", rh)");
            
            #line 90 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 90 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Returns a vector whose components are the minimum of each of the pairs of components in the two source vectors
        /// </summary>
        /// <param name=""lh"">the first source vector</param>
        /// <param name=""rh"">the second source vector</param>
        /// <returns>the min vector</returns>
        public static ");
            
            #line 98 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Min<T>(");
            
            #line 98 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, ");
            
            #line 98 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> rh) ");
            
            #line 98 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 100 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Min(lh.");
            
            #line 101 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", rh.");
            
            #line 101 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 101 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 101 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Returns a vector whose components are the minimum of a component of the source vector and a scalar
        /// </summary>
        /// <param name=""lh"">the source vector</param>
        /// <param name=""rh"">the source scalar</param>
        /// <returns>the min vector</returns>
        public static ");
            
            #line 109 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Min<T>(");
            
            #line 109 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> lh, T rh) ");
            
            #line 109 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 111 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Min(lh.");
            
            #line 112 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", rh)");
            
            #line 112 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 112 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Restricts a vector between a minimum and a maximum value.
        /// </summary>
        /// <param name=""val"">the source vector</param>
        /// <param name=""min"">the min vector</param>
        /// <param name=""max"">the max vector</param>
        /// <returns></returns>
        public static ");
            
            #line 121 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Clamp<T>(");
            
            #line 121 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val, ");
            
            #line 121 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> min, ");
            
            #line 121 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> max) ");
            
            #line 121 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 123 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Clamp(val.");
            
            #line 124 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", min.");
            
            #line 124 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", max.");
            
            #line 124 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 124 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 124 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Restricts a vector between a minimum and a maximum value.
        /// </summary>
        /// <param name=""val"">the source vector</param>
        /// <param name=""min"">the min vector</param>
        /// <param name=""max"">the max scalar</param>
        /// <returns></returns>
        public static ");
            
            #line 133 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Clamp<T>(");
            
            #line 133 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val, ");
            
            #line 133 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> min, T max) ");
            
            #line 133 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 135 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Clamp(val.");
            
            #line 136 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", min.");
            
            #line 136 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", max)");
            
            #line 136 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 136 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Restricts a vector between a minimum and a maximum value.
        /// </summary>
        /// <param name=""val"">the source vector</param>
        /// <param name=""min"">the min scalar</param>
        /// <param name=""max"">the max vector</param>
        /// <returns></returns>
        public static ");
            
            #line 145 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Clamp<T>(");
            
            #line 145 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val, T min, ");
            
            #line 145 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> max) ");
            
            #line 145 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 147 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Clamp(val.");
            
            #line 148 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", min, max.");
            
            #line 148 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 148 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 148 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Restricts a vector between a minimum and a maximum value.
        /// </summary>
        /// <param name=""val"">the source vector</param>
        /// <param name=""min"">the min scalar</param>
        /// <param name=""max"">the max scalar</param>
        /// <returns></returns>
        public static ");
            
            #line 157 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Clamp<T>(");
            
            #line 157 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val, T min, T max) ");
            
            #line 157 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 159 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Clamp(val.");
            
            #line 160 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", min, max)");
            
            #line 160 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 160 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Returns a vector whose components are the absolute values of each of the specified vector's components.
        /// </summary>
        /// <param name=""val"">the source vector</param>
        /// <returns>the absolute value vector</returns>
        public static ");
            
            #line 167 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Abs<T>(");
            
            #line 167 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) ");
            
            #line 167 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 169 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.Abs(val.");
            
            #line 170 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 170 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 170 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Returns a vector whose components have the value of the specified vector's components but with the sign of the sign vector's components.
        /// </summary>
        /// <param name=""val"">the source vector</param>
        /// <param name=""sign"">the sign vector</param>
        /// <returns>the modified vector</returns>
        public static ");
            
            #line 178 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CopySign<T>(");
            
            #line 178 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val, ");
            
            #line 178 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> sign) ");
            
            #line 178 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 180 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.CopySign(val.");
            
            #line 181 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", sign.");
            
            #line 181 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 181 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 181 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Returns a vector whose components have the value of the specified vector's components but with the sign of the sign scalar.
        /// </summary>
        /// <param name=""val"">the source vector</param>
        /// <param name=""sign"">the sign scalar</param>
        /// <returns>the modified vector</returns>
        public static ");
            
            #line 189 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CopySign<T>(");
            
            #line 189 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val, T sign) ");
            
            #line 189 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 191 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.CopySign(val.");
            
            #line 192 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", sign)");
            
            #line 192 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 192 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Returns a vector whose components have the value of the specified scalar but with the sign of the sign vector's components.
        /// </summary>
        /// <param name=""val"">the source scalar</param>
        /// <param name=""sign"">the sign vector</param>
        /// <returns>the modified vector</returns>
        public static ");
            
            #line 200 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CopySign<T>(T val, ");
            
            #line 200 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> sign) ");
            
            #line 200 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 202 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.CopySign(val, sign.");
            
            #line 203 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 203 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 203 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                }
            
            #line default
            #line hidden
            this.Write(@");
        }
        /// <summary>
        /// Returns a vector whose components have the value of the sign of the specified vector's components.
        /// </summary>
        /// <param name=""val"">the source vector</param>
        /// <returns>the sign vector</returns>
        public static ");
            
            #line 211 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Sign<T>(");
            
            #line 211 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> val) ");
            
            #line 211 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return new(");
            
            #line 213 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
for (int i = 0; i < Dimension; i++)
            {
            
            #line default
            #line hidden
            this.Write("T.CreateTruncating(T.Sign(val.");
            
            #line 214 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write("))");
            
            #line 214 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 214 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write(@");
        }

        /// <summary>
        /// Returns the reflected incident vector across the given normal vector
        /// </summary>
        /// <param name=""incident"">the incident vector</param>
        /// <param name=""normal"">the normal vector</param>
        /// <returns>the reflected vector</returns>
        public static ");
            
            #line 223 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Reflect<T>(");
            
            #line 223 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> incident, ");
            
            #line 223 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> normal) ");
            
            #line 223 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            ");
            
            #line 225 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T> temp = normal * Dot(incident, normal);
            return incident - (temp + temp);
        }

        /// <summary>
        /// Returns a vector whose components have been linearly interpolated between the two source vectors based on the time vector
        /// </summary>
        /// <param name=""vector0"">the first source vector</param>
        /// <param name=""vector1"">the second source vector</param>
        /// <param name=""t"">the time vector</param>
        /// <returns>the interpolated vector</returns>
        public static ");
            
            #line 236 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Lerp<T>(");
            
            #line 236 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector0, ");
            
            #line 236 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector1, ");
            
            #line 236 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> t) ");
            
            #line 236 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            return vector0 * ");
            
            #line 238 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Max(");
            
            #line 238 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>.One - t, ");
            
            #line 238 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>.Zero) + vector1 * ");
            
            #line 238 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Max(t, ");
            
            #line 238 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T>.Zero);
        }
        /// <summary>
        /// Returns a vector whose components have been linearly interpolated between the two source vectors based on the time vector which is clamped between 0 and 1
        /// </summary>
        /// <param name=""vector0"">the first vector</param>
        /// <param name=""vector1"">the second vector</param>
        /// <param name=""t"">the time vector</param>
        /// <returns>the interpolated vector</returns>
        public static ");
            
            #line 247 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ClampedLerp<T>(");
            
            #line 247 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector0, ");
            
            #line 247 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector1, ");
            
            #line 247 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> t) ");
            
            #line 247 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            t = ");
            
            #line 249 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(".Clamp(t, ");
            
            #line 249 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>.Zero, ");
            
            #line 249 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write(@"<T>.One);
            return vector0 * (T.One - t) + vector1 * t;
        }

        /// <summary>
        /// Returns a vector whose components have been linearly interpolated between the two source vectors based on the time scalar
        /// </summary>
        /// <param name=""vector0"">the first vector</param>
        /// <param name=""vector1"">the second vector</param>
        /// <param name=""t"">the time scalar</param>
        /// <returns>the interpolated vector</returns>
        public static ");
            
            #line 260 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Lerp<T>(");
            
            #line 260 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector0, ");
            
            #line 260 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector1, T t) ");
            
            #line 260 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(@"
        {
            return vector0 * T.Max(T.One - t, T.Zero) * vector1 * T.Max(t, T.Zero);
        }
        /// <summary>
        /// Returns a vector whose components have been linearly interpolated between the two source vectors based on the time scalar which is clamped between 0 and 1
        /// </summary>
        /// <param name=""vector0"">the first vector</param>
        /// <param name=""vector1"">the second vector</param>
        /// <param name=""t"">the time scalar</param>
        /// <returns>the interpolated vector</returns>
        public static ");
            
            #line 271 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ClampedLerp<T>(");
            
            #line 271 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector0, ");
            
            #line 271 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector1, T t) ");
            
            #line 271 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            t = T.Clamp(t, T.Zero, T.One);\r\n            return vecto" +
                    "r0 * (T.One - t) * vector1 * t;\r\n        }");
            
            #line 275 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

            for (int i = MinMatRow; i <= MaxMatRow; i++)
            {
                for (int j = MinMatCol; j <= MaxMatCol; j++)
                {
            
            #line default
            #line hidden
            this.Write(@"                
        /// <summary>
        /// Transforms this vector by multiplying it in homogenous space with a given matrix
        /// </summary>
        /// <param name=""value"">the source vector</param>
        /// <param name=""transform"">the transform matrix</param>
        public static ");
            
            #line 286 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Transform<T>(");
            
            #line 286 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> value, Matrix");
            
            #line 286 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("x");
            
            #line 286 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            
            #line 286 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "F" : "I"));
            
            #line default
            #line hidden
            this.Write("<T> transform) ");
            
            #line 286 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 286 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetMatrixMultiplication(i, j, Dimension, FloatType, "value", "transform", true)));
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// Transforms this vector by multiplying it with a given matrix
        /// </summary>
        /// <param name=""value"">the source vector</param>
        /// <param name=""transform"">the transform matrix</param>
        public static ");
            
            #line 292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> TransformNormal<T>(");
            
            #line 292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> value, Matrix");
            
            #line 292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("x");
            
            #line 292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            
            #line 292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "F" : "I"));
            
            #line default
            #line hidden
            this.Write("<T> transform) ");
            
            #line 292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 292 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetMatrixMultiplication(i, j, Dimension, FloatType, "value", "transform", false)));
            
            #line default
            #line hidden
            this.Write("\r\n        ");
            
            #line 293 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            }
            
            #line default
            #line hidden
            this.Write(@"/// <summary>
        /// Transforms this vector by multiplying it in homogenous space with a given matrix
        /// </summary>
        /// <param name=""value"">the source vector</param>
        /// <param name=""transform"">the transform matrix</param>
        public static ");
            
            #line 299 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Transform<T>(");
            
            #line 299 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> value, Matrix5x4");
            
            #line 299 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "F" : "I"));
            
            #line default
            #line hidden
            this.Write("<T> transform) ");
            
            #line 299 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 299 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetMatrixMultiplication(5, 4, Dimension, FloatType, "value", "transform", true)));
            
            #line default
            #line hidden
            this.Write(@"
        /// <summary>
        /// Transforms this vector by multiplying it with a given matrix
        /// </summary>
        /// <param name=""value"">the source vector</param>
        /// <param name=""transform"">the transform matrix</param>
        public static ");
            
            #line 305 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> TransformNormal<T>(");
            
            #line 305 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> value, Matrix5x4");
            
            #line 305 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FloatType ? "F" : "I"));
            
            #line default
            #line hidden
            this.Write("<T> transform) ");
            
            #line 305 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 305 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetMatrixMultiplication(5, 4, Dimension, FloatType, "value", "transform", false)));
            
            #line default
            #line hidden
            this.Write("\r\n            #endregion\r\n\r\n");
            
            #line 308 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

    if (FloatType)
    {
            
            #line default
            #line hidden
            this.Write(@"        #region Floating Point Specific
        /// <summary>
        /// Returns the normalized version of the given vector
        /// </summary>
        /// <param name=""vector"">the source vector</param>
        /// <returns>the normalized vector</returns>
        public static ");
            
            #line 317 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Normalize<T>(");
            
            #line 317 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> vector) ");
            
            #line 317 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(@"
        {
            return vector / vector.Length;
        }

        /// <summary>
        /// Returns a vector whose components are the value of the Sqrt of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Sqrt vector</returns>
        public static ");
            
            #line 327 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Sqrt<T>(");
            
            #line 327 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 327 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 327 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Sqrt(x.");
            
            #line 329 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 329 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 329 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Acosh of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Acosh vector</returns>
        public static ");
            
            #line 336 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Acosh<T>(");
            
            #line 336 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 336 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 336 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Acosh(x.");
            
            #line 338 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 338 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 338 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Asinh of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Asinh vector</returns>
        public static ");
            
            #line 345 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Asinh<T>(");
            
            #line 345 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 345 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 345 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Asinh(x.");
            
            #line 347 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 347 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 347 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Atanh of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Atanh vector</returns>
        public static ");
            
            #line 354 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Atanh<T>(");
            
            #line 354 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 354 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 354 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Atanh(x.");
            
            #line 356 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 356 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 356 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Cosh of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Cosh vector</returns>
        public static ");
            
            #line 363 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Cosh<T>(");
            
            #line 363 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 363 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 363 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Cosh(x.");
            
            #line 365 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 365 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 365 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Sinh of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Sinh vector</returns>
        public static ");
            
            #line 372 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Sinh<T>(");
            
            #line 372 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 372 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 372 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Sinh(x.");
            
            #line 374 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 374 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 374 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Tanh of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Tanh vector</returns>
        public static ");
            
            #line 381 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Tanh<T>(");
            
            #line 381 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 381 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 381 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Tanh(x.");
            
            #line 383 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 383 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 383 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Acos of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Acos vector</returns>
        public static ");
            
            #line 390 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Acos<T>(");
            
            #line 390 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 390 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 390 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Acos(x.");
            
            #line 392 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 392 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 392 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the AcosPi of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the AcosPi vector</returns>
        public static ");
            
            #line 399 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> AcosPi<T>(");
            
            #line 399 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 399 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 399 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.AcosPi(x.");
            
            #line 401 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 401 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 401 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Asin of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Asin vector</returns>
        public static ");
            
            #line 408 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Asin<T>(");
            
            #line 408 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 408 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 408 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Asin(x.");
            
            #line 410 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 410 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 410 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the AsinPi of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the AsinPi vector</returns>
        public static ");
            
            #line 417 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> AsinPi<T>(");
            
            #line 417 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 417 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 417 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.AsinPi(x.");
            
            #line 419 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 419 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 419 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Atan of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Atan vector</returns>
        public static ");
            
            #line 426 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Atan<T>(");
            
            #line 426 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 426 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 426 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Atan(x.");
            
            #line 428 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 428 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 428 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the AtanPi of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the AtanPi vector</returns>
        public static ");
            
            #line 435 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> AtanPi<T>(");
            
            #line 435 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 435 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 435 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.AtanPi(x.");
            
            #line 437 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 437 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 437 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Cos of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Cos vector</returns>
        public static ");
            
            #line 444 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Cos<T>(");
            
            #line 444 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 444 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 444 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Cos(x.");
            
            #line 446 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 446 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 446 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the CosPi of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the CosPi vector</returns>
        public static ");
            
            #line 453 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> CosPi<T>(");
            
            #line 453 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 453 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 453 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.CosPi(x.");
            
            #line 455 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 455 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 455 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Sin of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Sin vector</returns>
        public static ");
            
            #line 462 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Sin<T>(");
            
            #line 462 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 462 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 462 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Sin(x.");
            
            #line 464 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 464 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 464 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the SinPi of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the SinPi vector</returns>
        public static ");
            
            #line 471 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> SinPi<T>(");
            
            #line 471 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 471 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 471 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.SinPi(x.");
            
            #line 473 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 473 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 473 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Tan of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Tan vector</returns>
        public static ");
            
            #line 480 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Tan<T>(");
            
            #line 480 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 480 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 480 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Tan(x.");
            
            #line 482 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 482 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 482 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the TanPi of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the TanPi vector</returns>
        public static ");
            
            #line 489 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> TanPi<T>(");
            
            #line 489 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 489 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 489 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.TanPi(x.");
            
            #line 491 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 491 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 491 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the DegreesToRadians of the source vector's components
        /// </summary>
        /// <param name=""degrees"">the source vector</param>
        /// <returns>the DegreesToRadians vector</returns>
        public static ");
            
            #line 498 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> DegreesToRadians<T>(");
            
            #line 498 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> degrees) ");
            
            #line 498 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 498 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.DegreesToRadians(degrees.");
            
            #line 500 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 500 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 500 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the RadiansToDegrees of the source vector's components
        /// </summary>
        /// <param name=""radians"">the source vector</param>
        /// <returns>the RadiansToDegrees vector</returns>
        public static ");
            
            #line 507 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> RadiansToDegrees<T>(");
            
            #line 507 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> radians) ");
            
            #line 507 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 507 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.RadiansToDegrees(radians.");
            
            #line 509 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 509 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 509 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns two vectors whose components are the value of the SinCos of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the SinCos vector</returns>
        public static (");
            
            #line 516 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 516 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>) SinCos<T>(");
            
            #line 516 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 516 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {");
            
            #line 517 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            (T, T) sinCos");
            
            #line 521 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" = T.SinCos(x.");
            
            #line 521 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(");");
            
            #line 521 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            return (new(");
            
            #line 523 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("sinCos");
            
            #line 525 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Item1");
            
            #line 525 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 525 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write("), new(");
            
            #line 526 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("sinCos");
            
            #line 528 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Item2");
            
            #line 528 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 528 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@"));
        }
        /// <summary>
        /// Returns two vectors whose components are the value of the SinCosPi of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the SinCosPi vector</returns>
        public static (");
            
            #line 536 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 536 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T>) SinCosPi<T>(");
            
            #line 536 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 536 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {");
            
            #line 537 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            (T, T) sinCos");
            
            #line 541 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" = T.SinCosPi(x.");
            
            #line 541 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(");");
            
            #line 541 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            return (new(");
            
            #line 543 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("sinCos");
            
            #line 545 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Item1");
            
            #line 545 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 545 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write("), new(");
            
            #line 546 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("sinCos");
            
            #line 548 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Item2");
            
            #line 548 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 548 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@"));
        }
        /// <summary>
        /// Returns a vector whose components are the value of the Log of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Log vector</returns>
        public static ");
            
            #line 556 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Log<T>(");
            
            #line 556 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 556 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 556 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Log(x.");
            
            #line 558 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 558 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 558 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Log of the source vector's components using the newBase vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""newBase"">the newBase vector</param>
        /// <returns>the Log vector</returns>
        public static ");
            
            #line 566 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Log<T>(");
            
            #line 566 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 566 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> newBase) ");
            
            #line 566 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 566 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Log(x.");
            
            #line 568 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", newBase.");
            
            #line 568 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 568 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 568 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Log of the source vector's components using the newBase scalar
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""newBase"">the newBase scalar</param>
        /// <returns>the Log vector</returns>
        public static ");
            
            #line 576 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Log<T>(");
            
            #line 576 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, T newBase) ");
            
            #line 576 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 576 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Log(x.");
            
            #line 578 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", newBase)");
            
            #line 578 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 578 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the LogP1 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the LogP1 vector</returns>
        public static ");
            
            #line 585 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> LogP1<T>(");
            
            #line 585 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 585 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 585 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.LogP1(x.");
            
            #line 587 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 587 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 587 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Log2 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Log2 vector</returns>
        public static ");
            
            #line 594 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Log2<T>(");
            
            #line 594 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 594 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 594 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Log2(x.");
            
            #line 596 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 596 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 596 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Log2P1 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Log2P1 vector</returns>
        public static ");
            
            #line 603 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Log2P1<T>(");
            
            #line 603 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 603 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 603 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Log2P1(x.");
            
            #line 605 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 605 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 605 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Log10 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Log10 vector</returns>
        public static ");
            
            #line 612 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Log10<T>(");
            
            #line 612 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 612 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 612 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Log10(x.");
            
            #line 614 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 614 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 614 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Log10P1 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Log10P1 vector</returns>
        public static ");
            
            #line 621 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Log10P1<T>(");
            
            #line 621 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 621 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 621 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Log10P1(x.");
            
            #line 623 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 623 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 623 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Exp of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Exp vector</returns>
        public static ");
            
            #line 630 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Exp<T>(");
            
            #line 630 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 630 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 630 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Exp(x.");
            
            #line 632 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 632 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 632 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the ExpM1 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the ExpM1 vector</returns>
        public static ");
            
            #line 639 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ExpM1<T>(");
            
            #line 639 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 639 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 639 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.ExpM1(x.");
            
            #line 641 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 641 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 641 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Exp2 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Exp2 vector</returns>
        public static ");
            
            #line 648 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Exp2<T>(");
            
            #line 648 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 648 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 648 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Exp2(x.");
            
            #line 650 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 650 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 650 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Exp2M1 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Exp2M1 vector</returns>
        public static ");
            
            #line 657 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Exp2M1<T>(");
            
            #line 657 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 657 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 657 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Exp2M1(x.");
            
            #line 659 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 659 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 659 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Exp10 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Exp10 vector</returns>
        public static ");
            
            #line 666 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Exp10<T>(");
            
            #line 666 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 666 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 666 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Exp10(x.");
            
            #line 668 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 668 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 668 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Exp10M1 of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Exp10M1 vector</returns>
        public static ");
            
            #line 675 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Exp10M1<T>(");
            
            #line 675 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 675 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 675 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Exp10M1(x.");
            
            #line 677 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 677 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 677 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Pow of the first source vector's components to the power of the second source vector's components
        /// </summary>
        /// <param name=""x"">the first source vector</param>
        /// <param name=""y"">the second source vector</param>
        /// <returns>the Log vector</returns>
        public static ");
            
            #line 685 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Pow<T>(");
            
            #line 685 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 685 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> y) ");
            
            #line 685 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 685 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Pow(x.");
            
            #line 687 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", y.");
            
            #line 687 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 687 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 687 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Pow of the first source vector's components to the power of the source scalar
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""y"">the source scalar</param>
        /// <returns>the Log vector</returns>
        public static ");
            
            #line 695 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Pow<T>(");
            
            #line 695 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, T y) ");
            
            #line 695 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 695 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Pow(x.");
            
            #line 697 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", y)");
            
            #line 697 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 697 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Cbrt of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Cbrt vector</returns>
        public static ");
            
            #line 704 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Cbrt<T>(");
            
            #line 704 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 704 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 704 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Cbrt(x.");
            
            #line 706 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 706 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 706 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Hypotenuse of the right triangles created from the two vector's components
        /// </summary>
        /// <param name=""x"">the first source vector</param>
        /// <param name=""y"">the second source vector</param>
        /// <returns>the Hypot vector</returns>
        public static ");
            
            #line 714 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Hypot<T>(");
            
            #line 714 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 714 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> y) ");
            
            #line 714 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 714 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Hypot(x.");
            
            #line 716 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", y.");
            
            #line 716 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 716 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 716 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Hypotenuse of the right triangles created from the vector's component and the scalar value
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""y"">the source scalar</param>
        /// <returns>the Hypot vector</returns>
        public static ");
            
            #line 724 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Hypot<T>(");
            
            #line 724 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, T y) ");
            
            #line 724 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 724 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Hypot(x.");
            
            #line 726 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", y)");
            
            #line 726 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 726 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the RootN of the source vector's components using the given root
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""n"">the root</param>
        /// <returns>the RootN vector</returns>
        public static ");
            
            #line 734 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> RootN<T>(");
            
            #line 734 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, int n) ");
            
            #line 734 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 734 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.RootN(x.");
            
            #line 736 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", n)");
            
            #line 736 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 736 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Round of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Round vector</returns>
        public static ");
            
            #line 743 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Round<T>(");
            
            #line 743 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 743 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 743 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Round(x.");
            
            #line 745 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 745 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 745 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Round of the source vector's components to the given digits
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""digits"">digits to round to</param>
        /// <returns>the Round vector</returns>
        public static ");
            
            #line 753 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Round<T>(");
            
            #line 753 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, int digits) ");
            
            #line 753 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 753 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Round(x.");
            
            #line 755 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", digits)");
            
            #line 755 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 755 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Round of the source vector's components using the given mode
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""mode"">the rounding mode</param>
        /// <returns>the Round vector</returns>
        public static ");
            
            #line 763 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Round<T>(");
            
            #line 763 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, MidpointRounding mode) ");
            
            #line 763 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 763 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Round(x.");
            
            #line 765 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", mode)");
            
            #line 765 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 765 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Round of the source vector's components to the given digits using the given mode
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""digits"">digits to round to</param>
        /// <param name=""mode"">the rounding mode</param>
        /// <returns>the Round vector</returns>
        public static ");
            
            #line 774 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Round<T>(");
            
            #line 774 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, int digits, MidpointRounding mode) ");
            
            #line 774 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 774 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Round(x.");
            
            #line 776 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", digits, mode)");
            
            #line 776 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 776 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Floor of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Floor vector</returns>
        public static ");
            
            #line 783 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Floor<T>(");
            
            #line 783 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 783 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 783 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Floor(x.");
            
            #line 785 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 785 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 785 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Ceiling of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Ceiling vector</returns>
        public static ");
            
            #line 792 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Ceiling<T>(");
            
            #line 792 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 792 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 792 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Ceiling(x.");
            
            #line 794 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 794 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 794 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Truncate of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Truncate vector</returns>
        public static ");
            
            #line 801 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Truncate<T>(");
            
            #line 801 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 801 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 801 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Truncate(x.");
            
            #line 803 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 803 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 803 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Atan2 of the source vector's components using the second source vector's components
        /// </summary>
        /// <param name=""x"">the first source vector</param>
        /// <param name=""y"">the second source vector</param>
        /// <returns>the Atan2 vector</returns>
        public static ");
            
            #line 811 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Atan2<T>(");
            
            #line 811 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 811 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> y) ");
            
            #line 811 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 811 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Atan2(x.");
            
            #line 813 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", y.");
            
            #line 813 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 813 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 813 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Atan2 of the source vector's components using the source scalar
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""y"">the source scalar</param>
        /// <returns>the Atan2 vector</returns>
        public static ");
            
            #line 821 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Atan2<T>(");
            
            #line 821 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, T y) ");
            
            #line 821 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 821 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Atan2(x.");
            
            #line 823 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", y)");
            
            #line 823 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 823 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Atan2Pi of the source vector's components using the second source vector's components
        /// </summary>
        /// <param name=""x"">the first source vector</param>
        /// <param name=""y"">the second source vector</param>
        /// <returns>the Atan2Pi vector</returns>
        public static ");
            
            #line 831 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Atan2Pi<T>(");
            
            #line 831 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 831 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> y) ");
            
            #line 831 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 831 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Atan2Pi(x.");
            
            #line 833 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", y.");
            
            #line 833 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 833 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 833 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Atan2Pi of the source vector's components using the source scalar
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""y"">the source scalar</param>
        /// <returns>the Atan2Pi vector</returns>
        public static ");
            
            #line 841 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> Atan2Pi<T>(");
            
            #line 841 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, T y) ");
            
            #line 841 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 841 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Atan2Pi(x.");
            
            #line 843 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", y)");
            
            #line 843 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 843 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the BitDecrement of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the BitDecrement vector</returns>
        public static ");
            
            #line 850 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> BitDecrement<T>(");
            
            #line 850 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 850 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 850 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.BitDecrement(x.");
            
            #line 852 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 852 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 852 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the BitIncrement of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the BitIncrement vector</returns>
        public static ");
            
            #line 859 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> BitIncrement<T>(");
            
            #line 859 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 859 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 859 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.BitIncrement(x.");
            
            #line 861 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 861 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 861 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the FusedMultiplyAdd between the source vectors
        /// </summary>
        /// <param name=""left"">the first source vector</param>
        /// <param name=""right"">the second source vector</param>
        /// <param name=""addend"">the addend source vector</param>
        /// <returns>the FusedMultiplyAdd vector</returns>
        public static ");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> FusedMultiplyAdd<T>(");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> left, ");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> right, ");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> addend) ");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 870 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.FusedMultiplyAdd(left.");
            
            #line 872 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", right.");
            
            #line 872 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", addend.");
            
            #line 872 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 872 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 872 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the FusedMultiplyAdd between the source vectors and the source scalar
        /// </summary>
        /// <param name=""left"">the first source vector</param>
        /// <param name=""right"">the second source vector</param>
        /// <param name=""addend"">the addend source scalar</param>
        /// <returns>the FusedMultiplyAdd vector</returns>
        public static ");
            
            #line 881 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> FusedMultiplyAdd<T>(");
            
            #line 881 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> left, ");
            
            #line 881 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> right, T addend) ");
            
            #line 881 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 881 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.FusedMultiplyAdd(left.");
            
            #line 883 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", right.");
            
            #line 883 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", addend)");
            
            #line 883 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 883 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the FusedMultiplyAdd between the source vectors and the source scalar
        /// </summary>
        /// <param name=""left"">the first source vector</param>
        /// <param name=""right"">the second source scalar</param>
        /// <param name=""addend"">the addend source vector</param>
        /// <returns>the FusedMultiplyAdd vector</returns>
        public static ");
            
            #line 892 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> FusedMultiplyAdd<T>(");
            
            #line 892 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> left, T right, ");
            
            #line 892 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> addend) ");
            
            #line 892 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 892 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.FusedMultiplyAdd(left.");
            
            #line 894 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", right, addend.");
            
            #line 894 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 894 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 894 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the FusedMultiplyAdd between the source vectors and the source scalar
        /// </summary>
        /// <param name=""left"">the first source vector</param>
        /// <param name=""right"">the second source scalar</param>
        /// <param name=""addend"">the addend source scalar</param>
        /// <returns>the FusedMultiplyAdd vector</returns>
        public static ");
            
            #line 903 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> FusedMultiplyAdd<T>(");
            
            #line 903 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> left, T right, T addend) ");
            
            #line 903 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 903 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.FusedMultiplyAdd(left.");
            
            #line 905 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", right, addend)");
            
            #line 905 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 905 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the ReciprocalEstimate of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the ReciprocalEstimate vector</returns>
        public static ");
            
            #line 912 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ReciprocalEstimate<T>(");
            
            #line 912 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 912 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 912 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.ReciprocalEstimate(x.");
            
            #line 914 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 914 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 914 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the ReciprocalSqrtEstimate of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the ReciprocalSqrtEstimate vector</returns>
        public static ");
            
            #line 921 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ReciprocalSqrtEstimate<T>(");
            
            #line 921 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 921 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 921 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.ReciprocalSqrtEstimate(x.");
            
            #line 923 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 923 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 923 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the ILogB of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the ILogB vector</returns>
        public static ");
            
            #line 930 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<int> ILogB<T>(");
            
            #line 930 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 930 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 930 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.ILogB(x.");
            
            #line 932 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 932 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 932 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the ScaleB of the source vector's components using the second source vector's components
        /// </summary>
        /// <param name=""x"">the first source vector</param>
        /// <param name=""n"">the second source vector</param>
        /// <returns>the ScaleB vector</returns>
        public static ");
            
            #line 940 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ScaleB<T>(");
            
            #line 940 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, ");
            
            #line 940 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<int> n) ");
            
            #line 940 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 940 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.ScaleB(x.");
            
            #line 942 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", n.");
            
            #line 942 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 942 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 942 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the ScaleB of the source vector's components using the second source scalar
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <param name=""n"">the source scalar</param>
        /// <returns>the ScaleB vector</returns>
        public static ");
            
            #line 950 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> ScaleB<T>(");
            
            #line 950 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x, int n) ");
            
            #line 950 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 950 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.ScaleB(x.");
            
            #line 952 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", n)");
            
            #line 952 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 952 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Round of the source vector's components truncated to an int
        /// </summary>
        /// <typeparam name=""TOther"">the integer type</typeparam>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Round vector</returns>
        public static ");
            
            #line 960 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<TOther> RoundToInt<T, TOther>(");
            
            #line 960 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 960 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" where TOther : unmanaged, IBinaryInteger<TOther> => new(");
            
            #line 960 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("TOther.CreateTruncating(T.Round(x.");
            
            #line 962 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 962 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 962 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Floor of the source vector's components truncated to an int
        /// </summary>
        /// <typeparam name=""TOther"">the integer type</typeparam>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Floor vector</returns>
        public static ");
            
            #line 970 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<TOther> FloorToInt<T, TOther>(");
            
            #line 970 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 970 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" where TOther : unmanaged, IBinaryInteger<TOther> => new(");
            
            #line 970 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("TOther.CreateTruncating(T.Floor(x.");
            
            #line 972 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 972 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 972 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns a vector whose components are the value of the Ceiling of the source vector's components truncated to an int
        /// </summary>
        /// <typeparam name=""TOther"">the integer type</typeparam>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Ceiling vector</returns>
        public static ");
            
            #line 980 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<TOther> CeilingToInt<T, TOther>(");
            
            #line 980 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, FloatType)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 980 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" where TOther : unmanaged, IBinaryInteger<TOther> => new(");
            
            #line 980 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("TOther.CreateTruncating(x.");
            
            #line 982 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 982 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 982 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        #endregion\r\n");
            
            #line 985 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

    }
    else
    {
            
            #line default
            #line hidden
            this.Write(@"        #region Integer Specific
        /// <summary>
        /// Returns a vector whose components are the Log2 value of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the Log2 vector</returns>
        public static ");
            
            #line 995 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> Log2<T>(");
            
            #line 995 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 995 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 995 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.Log2(x.");
            
            #line 997 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 997 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 997 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@");
        /// <summary>
        /// Returns two vectors whose components are the DivRem value of the two source vectors
        /// </summary>
        /// <param name=""left"">the quotient source vector</param>
        /// <param name=""right"">the dividend source vector</param>
        /// <returns>the DivRem vectors</returns>
        public static (");
            
            #line 1005 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 1005 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T>) DivRem<T>(");
            
            #line 1005 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> left, ");
            
            #line 1005 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> right) ");
            
            #line 1005 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {");
            
            #line 1006 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            (T, T) divRem");
            
            #line 1010 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" = T.DivRem(left.");
            
            #line 1010 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", right.");
            
            #line 1010 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(");");
            
            #line 1010 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            return (new(");
            
            #line 1012 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("divRem");
            
            #line 1014 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Item1");
            
            #line 1014 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1014 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write("), new(");
            
            #line 1015 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("divRem");
            
            #line 1017 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Item2");
            
            #line 1017 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1017 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@"));
        }

        /// <summary>
        /// Returns two vectors whose components are the DivRem value of the source vector and the source scalar
        /// </summary>
        /// <param name=""left"">the quotient source vector</param>
        /// <param name=""right"">the dividend source scalar</param>
        /// <returns>the DivRem vectors</returns>
        public static (");
            
            #line 1027 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T>, ");
            
            #line 1027 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T>) DivRem<T>(");
            
            #line 1027 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> left, T right) ");
            
            #line 1027 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write("\r\n        {");
            
            #line 1028 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                for (int i = 0; i < Dimension; i++)
                {
            
            #line default
            #line hidden
            this.Write("\r\n            (T, T) divRem");
            
            #line 1032 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(" = T.DivRem(left.");
            
            #line 1032 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(", right);");
            
            #line 1032 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            return (new(");
            
            #line 1034 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("divRem");
            
            #line 1036 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Item1");
            
            #line 1036 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1036 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write("), new(");
            
            #line 1037 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("divRem");
            
            #line 1039 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(".Item2");
            
            #line 1039 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1039 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(@"));
        }

        /// <summary>
        /// Returns a vector whose components are the PopCount of the source vector's components
        /// </summary>
        /// <param name=""x"">the source vector</param>
        /// <returns>the PopCount vector</returns>
        public static ");
            
            #line 1048 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> PopCount<T>(");
            
            #line 1048 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetName(Dimension, false)));
            
            #line default
            #line hidden
            this.Write("<T> x) ");
            
            #line 1048 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WhereClause("T", FloatType)));
            
            #line default
            #line hidden
            this.Write(" => new(");
            
            #line 1048 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            for (int i = 0; i < Dimension; i++)
                            {
            
            #line default
            #line hidden
            this.Write("T.PopCount(x.");
            
            #line 1050 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetComponentName(i)));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 1050 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i < Dimension - 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 1050 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

                            }
            
            #line default
            #line hidden
            this.Write(");\r\n        #endregion\r\n");
            
            #line 1053 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

    }
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1057 "D:\Silk\A\eng\generation\Silk.Maths.Generation\VectorStatics.tt"

        public string GetName(int dimension, bool floatType)
        {
            return "Vector" + dimension + (floatType ? "F" : "I");
        }

        public string WhereClause(string TypeParam, bool floatType)
        {
            return "where T : unmanaged, " + (FloatType ? "IFloatingPointIeee754" : "IBinaryInteger") + "<T>";
        }

        private string GetComponentName(int dimension, bool Caps = true)
        {
            switch (dimension)
            {
                default:
                case 0:
                    return Caps ? "X" : "x";
                case 1:
                    return Caps ? "Y" : "y";
                case 2:
                    return Caps ? "Z" : "z";
                case 3:
                    return Caps ? "W" : "w";
                case 4:
                    return Caps ? "V" : "v";
                case 5:
                    return Caps ? "U" : "u";
            }
        }

        public string GetSwizzleName(int[] components, string separator)
        {
            string st = "";
            for (int i = 0; i < components.Length; i++)
            {
                st += GetComponentName(components[i]) + ((i < components.Length - 1) ? separator : "");
            }
            return st;
        }

        private string ForEachComponent(int dimensions, string prefix, string separator, string postfix, bool Caps = true, int start = 0)
        {
            string st = prefix;
            for (int i = start; i < dimensions; i++)
            {
                st += GetComponentName(i, Caps);

                if (i < dimensions - 1)
                {
                    st += separator;
                }
            }
            st += postfix;
        
        return st;
        }

        private string ForEachComponent(int dimensions, string prefix, string val, string separator, string postfix, int start = 0)
        {
            string st = prefix;
            for (int i = 0; i < dimensions; i++)
            {
                st += val;

                if (i < dimensions - 1)
                {
                    st += separator;
                }
            }
            st += postfix;
        
        return st;
        }

        private bool IsPowerOfTwo(int i)
        {
            return (i != 0) && ((i & (i - 1)) == 0);
        }

        private string GetMatrixMultiplication(int matrixRows, int matrixCols, int dimension, bool floatType, string vectorName, string matrixName, bool homogenous)
        {
            string ret;
            string components;
            if (matrixRows < dimension)
            {
                components = "";
                for (int i = 0; i < matrixRows; i++)
                    components += GetComponentName(i);
                ret = "(" + vectorName + ".Swizzle." + components + " * " + matrixName + ")";
            }
            else if (matrixRows == dimension)
            {
                ret = "(" + vectorName + " * " + matrixName + ")";
            }
            else
            {
                ret = "(new Vector" + dimension + (floatType ? "F" : "I") + "<T>(";
                for (int i = 0; i < dimension; i++)
                    ret += vectorName + "." + GetComponentName(i) + (i < dimension - 1 ? ", " : ") * ");
                ret += matrixName + ")";
            }

            if (matrixCols > dimension)
            {
                components = "";
                for (int i = 0; i < dimension; i++)
                    components += GetComponentName(i);
                ret += "Swizzle." + components;
            }
            else if (matrixCols < dimension)
            {
                int diff = dimension - matrixCols;
                components = "";
                for (int i = 0; i < diff; i++)
                    components += (i < diff - 2 || !homogenous ? "T.Zero" : "T.One") + (i < diff - 1 ? ", " : ")");
                ret = "new Vector" + dimension + (floatType ? "F" : "I") + "<T>(" + ret + components;
            }

            return ret + ";";
}
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class VectorStaticsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
